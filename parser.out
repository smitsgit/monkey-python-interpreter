Grammar:

Rule 0     S' -> statements
Rule 1     statements -> blk_statements
Rule 2     statements -> statement
Rule 3     statements -> statements statement
Rule 4     blk_statements -> LBRACE statements RBRACE
Rule 5     statement -> FUNC LPAREN params RPAREN statements
Rule 6     statement -> if_statement
Rule 7     statement -> return_statement
Rule 8     statement -> let_statement
Rule 9     statement -> ID LPAREN exprlist RPAREN
Rule 10    let_statement -> LET ID ASSIGN expr SEMICOLON
Rule 11    return_statement -> RETURN expr SEMICOLON
Rule 12    if_statement -> IF expr statements ELSE statements
Rule 13    params -> param
Rule 14    params -> params COMMA param
Rule 15    param -> ID
Rule 16    expr -> ID
Rule 17    expr -> NUMBER
Rule 18    expr -> FALSE
Rule 19    expr -> TRUE
Rule 20    expr -> NOT expr  [precedence=right, level=5]
Rule 21    expr -> MINUS expr  [precedence=right, level=5]
Rule 22    expr -> LPAREN expr RPAREN
Rule 23    expr -> expr NE expr  [precedence=left, level=1]
Rule 24    expr -> expr EQ expr  [precedence=left, level=1]
Rule 25    expr -> expr GT expr  [precedence=left, level=2]
Rule 26    expr -> expr LT expr  [precedence=left, level=2]
Rule 27    expr -> expr DIVIDE expr  [precedence=left, level=4]
Rule 28    expr -> expr TIMES expr  [precedence=left, level=4]
Rule 29    expr -> expr MINUS expr  [precedence=left, level=3]
Rule 30    expr -> expr PLUS expr  [precedence=left, level=3]
Rule 31    expr -> ID LPAREN exprlist RPAREN
Rule 32    exprlist -> expr
Rule 33    exprlist -> exprlist COMMA expr

Unused terminals:

    PRINT
    WHILE
    GE
    LE

Terminals, with rules where they appear:

ASSIGN               : 10
COMMA                : 14 33
DIVIDE               : 27
ELSE                 : 12
EQ                   : 24
FALSE                : 18
FUNC                 : 5
GE                   : 
GT                   : 25
ID                   : 9 10 15 16 31
IF                   : 12
LBRACE               : 4
LE                   : 
LET                  : 10
LPAREN               : 5 9 22 31
LT                   : 26
MINUS                : 21 29
NE                   : 23
NOT                  : 20
NUMBER               : 17
PLUS                 : 30
PRINT                : 
RBRACE               : 4
RETURN               : 11
RPAREN               : 5 9 22 31
SEMICOLON            : 10 11
TIMES                : 28
TRUE                 : 19
WHILE                : 
error                : 

Nonterminals, with rules where they appear:

blk_statements       : 1
expr                 : 10 11 12 20 21 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 32 33
exprlist             : 9 31 33
if_statement         : 6
let_statement        : 8
param                : 13 14
params               : 5 14
return_statement     : 7
statement            : 2 3
statements           : 3 4 5 12 12 0


state 0

    (0) S' -> . statements
    (1) statements -> . blk_statements
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) blk_statements -> . LBRACE statements RBRACE
    (5) statement -> . FUNC LPAREN params RPAREN statements
    (6) statement -> . if_statement
    (7) statement -> . return_statement
    (8) statement -> . let_statement
    (9) statement -> . ID LPAREN exprlist RPAREN
    (12) if_statement -> . IF expr statements ELSE statements
    (11) return_statement -> . RETURN expr SEMICOLON
    (10) let_statement -> . LET ID ASSIGN expr SEMICOLON
    LBRACE          shift and go to state 4
    FUNC            shift and go to state 5
    ID              shift and go to state 9
    IF              shift and go to state 10
    RETURN          shift and go to state 11
    LET             shift and go to state 12

    statements                     shift and go to state 1
    blk_statements                 shift and go to state 2
    statement                      shift and go to state 3
    if_statement                   shift and go to state 6
    return_statement               shift and go to state 7
    let_statement                  shift and go to state 8

state 1

    (0) S' -> statements .
    (3) statements -> statements . statement
    (5) statement -> . FUNC LPAREN params RPAREN statements
    (6) statement -> . if_statement
    (7) statement -> . return_statement
    (8) statement -> . let_statement
    (9) statement -> . ID LPAREN exprlist RPAREN
    (12) if_statement -> . IF expr statements ELSE statements
    (11) return_statement -> . RETURN expr SEMICOLON
    (10) let_statement -> . LET ID ASSIGN expr SEMICOLON
    FUNC            shift and go to state 5
    ID              shift and go to state 9
    IF              shift and go to state 10
    RETURN          shift and go to state 11
    LET             shift and go to state 12

    statement                      shift and go to state 13
    if_statement                   shift and go to state 6
    return_statement               shift and go to state 7
    let_statement                  shift and go to state 8

state 2

    (1) statements -> blk_statements .
    FUNC            reduce using rule 1 (statements -> blk_statements .)
    ID              reduce using rule 1 (statements -> blk_statements .)
    IF              reduce using rule 1 (statements -> blk_statements .)
    RETURN          reduce using rule 1 (statements -> blk_statements .)
    LET             reduce using rule 1 (statements -> blk_statements .)
    $end            reduce using rule 1 (statements -> blk_statements .)
    RBRACE          reduce using rule 1 (statements -> blk_statements .)
    ELSE            reduce using rule 1 (statements -> blk_statements .)


state 3

    (2) statements -> statement .
    FUNC            reduce using rule 2 (statements -> statement .)
    ID              reduce using rule 2 (statements -> statement .)
    IF              reduce using rule 2 (statements -> statement .)
    RETURN          reduce using rule 2 (statements -> statement .)
    LET             reduce using rule 2 (statements -> statement .)
    $end            reduce using rule 2 (statements -> statement .)
    RBRACE          reduce using rule 2 (statements -> statement .)
    ELSE            reduce using rule 2 (statements -> statement .)


state 4

    (4) blk_statements -> LBRACE . statements RBRACE
    (1) statements -> . blk_statements
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) blk_statements -> . LBRACE statements RBRACE
    (5) statement -> . FUNC LPAREN params RPAREN statements
    (6) statement -> . if_statement
    (7) statement -> . return_statement
    (8) statement -> . let_statement
    (9) statement -> . ID LPAREN exprlist RPAREN
    (12) if_statement -> . IF expr statements ELSE statements
    (11) return_statement -> . RETURN expr SEMICOLON
    (10) let_statement -> . LET ID ASSIGN expr SEMICOLON
    LBRACE          shift and go to state 4
    FUNC            shift and go to state 5
    ID              shift and go to state 9
    IF              shift and go to state 10
    RETURN          shift and go to state 11
    LET             shift and go to state 12

    statements                     shift and go to state 14
    blk_statements                 shift and go to state 2
    statement                      shift and go to state 3
    if_statement                   shift and go to state 6
    return_statement               shift and go to state 7
    let_statement                  shift and go to state 8

state 5

    (5) statement -> FUNC . LPAREN params RPAREN statements
    LPAREN          shift and go to state 15


state 6

    (6) statement -> if_statement .
    FUNC            reduce using rule 6 (statement -> if_statement .)
    ID              reduce using rule 6 (statement -> if_statement .)
    IF              reduce using rule 6 (statement -> if_statement .)
    RETURN          reduce using rule 6 (statement -> if_statement .)
    LET             reduce using rule 6 (statement -> if_statement .)
    $end            reduce using rule 6 (statement -> if_statement .)
    RBRACE          reduce using rule 6 (statement -> if_statement .)
    ELSE            reduce using rule 6 (statement -> if_statement .)


state 7

    (7) statement -> return_statement .
    FUNC            reduce using rule 7 (statement -> return_statement .)
    ID              reduce using rule 7 (statement -> return_statement .)
    IF              reduce using rule 7 (statement -> return_statement .)
    RETURN          reduce using rule 7 (statement -> return_statement .)
    LET             reduce using rule 7 (statement -> return_statement .)
    $end            reduce using rule 7 (statement -> return_statement .)
    RBRACE          reduce using rule 7 (statement -> return_statement .)
    ELSE            reduce using rule 7 (statement -> return_statement .)


state 8

    (8) statement -> let_statement .
    FUNC            reduce using rule 8 (statement -> let_statement .)
    ID              reduce using rule 8 (statement -> let_statement .)
    IF              reduce using rule 8 (statement -> let_statement .)
    RETURN          reduce using rule 8 (statement -> let_statement .)
    LET             reduce using rule 8 (statement -> let_statement .)
    $end            reduce using rule 8 (statement -> let_statement .)
    RBRACE          reduce using rule 8 (statement -> let_statement .)
    ELSE            reduce using rule 8 (statement -> let_statement .)


state 9

    (9) statement -> ID . LPAREN exprlist RPAREN
    LPAREN          shift and go to state 16


state 10

    (12) if_statement -> IF . expr statements ELSE statements
    (16) expr -> . ID
    (17) expr -> . NUMBER
    (18) expr -> . FALSE
    (19) expr -> . TRUE
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr NE expr
    (24) expr -> . expr EQ expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr LT expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr TIMES expr
    (29) expr -> . expr MINUS expr
    (30) expr -> . expr PLUS expr
    (31) expr -> . ID LPAREN exprlist RPAREN
    ID              shift and go to state 18
    NUMBER          shift and go to state 19
    FALSE           shift and go to state 20
    TRUE            shift and go to state 21
    NOT             shift and go to state 22
    MINUS           shift and go to state 23
    LPAREN          shift and go to state 24

    expr                           shift and go to state 17

state 11

    (11) return_statement -> RETURN . expr SEMICOLON
    (16) expr -> . ID
    (17) expr -> . NUMBER
    (18) expr -> . FALSE
    (19) expr -> . TRUE
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr NE expr
    (24) expr -> . expr EQ expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr LT expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr TIMES expr
    (29) expr -> . expr MINUS expr
    (30) expr -> . expr PLUS expr
    (31) expr -> . ID LPAREN exprlist RPAREN
    ID              shift and go to state 18
    NUMBER          shift and go to state 19
    FALSE           shift and go to state 20
    TRUE            shift and go to state 21
    NOT             shift and go to state 22
    MINUS           shift and go to state 23
    LPAREN          shift and go to state 24

    expr                           shift and go to state 25

state 12

    (10) let_statement -> LET . ID ASSIGN expr SEMICOLON
    ID              shift and go to state 26


state 13

    (3) statements -> statements statement .
    FUNC            reduce using rule 3 (statements -> statements statement .)
    ID              reduce using rule 3 (statements -> statements statement .)
    IF              reduce using rule 3 (statements -> statements statement .)
    RETURN          reduce using rule 3 (statements -> statements statement .)
    LET             reduce using rule 3 (statements -> statements statement .)
    $end            reduce using rule 3 (statements -> statements statement .)
    RBRACE          reduce using rule 3 (statements -> statements statement .)
    ELSE            reduce using rule 3 (statements -> statements statement .)


state 14

    (4) blk_statements -> LBRACE statements . RBRACE
    (3) statements -> statements . statement
    (5) statement -> . FUNC LPAREN params RPAREN statements
    (6) statement -> . if_statement
    (7) statement -> . return_statement
    (8) statement -> . let_statement
    (9) statement -> . ID LPAREN exprlist RPAREN
    (12) if_statement -> . IF expr statements ELSE statements
    (11) return_statement -> . RETURN expr SEMICOLON
    (10) let_statement -> . LET ID ASSIGN expr SEMICOLON
    RBRACE          shift and go to state 27
    FUNC            shift and go to state 5
    ID              shift and go to state 9
    IF              shift and go to state 10
    RETURN          shift and go to state 11
    LET             shift and go to state 12

    statement                      shift and go to state 13
    if_statement                   shift and go to state 6
    return_statement               shift and go to state 7
    let_statement                  shift and go to state 8

state 15

    (5) statement -> FUNC LPAREN . params RPAREN statements
    (13) params -> . param
    (14) params -> . params COMMA param
    (15) param -> . ID
    ID              shift and go to state 30

    params                         shift and go to state 28
    param                          shift and go to state 29

state 16

    (9) statement -> ID LPAREN . exprlist RPAREN
    (32) exprlist -> . expr
    (33) exprlist -> . exprlist COMMA expr
    (16) expr -> . ID
    (17) expr -> . NUMBER
    (18) expr -> . FALSE
    (19) expr -> . TRUE
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr NE expr
    (24) expr -> . expr EQ expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr LT expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr TIMES expr
    (29) expr -> . expr MINUS expr
    (30) expr -> . expr PLUS expr
    (31) expr -> . ID LPAREN exprlist RPAREN
    ID              shift and go to state 18
    NUMBER          shift and go to state 19
    FALSE           shift and go to state 20
    TRUE            shift and go to state 21
    NOT             shift and go to state 22
    MINUS           shift and go to state 23
    LPAREN          shift and go to state 24

    exprlist                       shift and go to state 31
    expr                           shift and go to state 32

state 17

    (12) if_statement -> IF expr . statements ELSE statements
    (23) expr -> expr . NE expr
    (24) expr -> expr . EQ expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . LT expr
    (27) expr -> expr . DIVIDE expr
    (28) expr -> expr . TIMES expr
    (29) expr -> expr . MINUS expr
    (30) expr -> expr . PLUS expr
    (1) statements -> . blk_statements
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) blk_statements -> . LBRACE statements RBRACE
    (5) statement -> . FUNC LPAREN params RPAREN statements
    (6) statement -> . if_statement
    (7) statement -> . return_statement
    (8) statement -> . let_statement
    (9) statement -> . ID LPAREN exprlist RPAREN
    (12) if_statement -> . IF expr statements ELSE statements
    (11) return_statement -> . RETURN expr SEMICOLON
    (10) let_statement -> . LET ID ASSIGN expr SEMICOLON
    NE              shift and go to state 34
    EQ              shift and go to state 35
    GT              shift and go to state 36
    LT              shift and go to state 37
    DIVIDE          shift and go to state 38
    TIMES           shift and go to state 39
    MINUS           shift and go to state 40
    PLUS            shift and go to state 41
    LBRACE          shift and go to state 4
    FUNC            shift and go to state 5
    ID              shift and go to state 9
    IF              shift and go to state 10
    RETURN          shift and go to state 11
    LET             shift and go to state 12

    statements                     shift and go to state 33
    blk_statements                 shift and go to state 2
    statement                      shift and go to state 3
    if_statement                   shift and go to state 6
    return_statement               shift and go to state 7
    let_statement                  shift and go to state 8

state 18

    (16) expr -> ID .
    (31) expr -> ID . LPAREN exprlist RPAREN
    NE              reduce using rule 16 (expr -> ID .)
    EQ              reduce using rule 16 (expr -> ID .)
    GT              reduce using rule 16 (expr -> ID .)
    LT              reduce using rule 16 (expr -> ID .)
    DIVIDE          reduce using rule 16 (expr -> ID .)
    TIMES           reduce using rule 16 (expr -> ID .)
    MINUS           reduce using rule 16 (expr -> ID .)
    PLUS            reduce using rule 16 (expr -> ID .)
    LBRACE          reduce using rule 16 (expr -> ID .)
    FUNC            reduce using rule 16 (expr -> ID .)
    ID              reduce using rule 16 (expr -> ID .)
    IF              reduce using rule 16 (expr -> ID .)
    RETURN          reduce using rule 16 (expr -> ID .)
    LET             reduce using rule 16 (expr -> ID .)
    SEMICOLON       reduce using rule 16 (expr -> ID .)
    RPAREN          reduce using rule 16 (expr -> ID .)
    COMMA           reduce using rule 16 (expr -> ID .)
    LPAREN          shift and go to state 42


state 19

    (17) expr -> NUMBER .
    NE              reduce using rule 17 (expr -> NUMBER .)
    EQ              reduce using rule 17 (expr -> NUMBER .)
    GT              reduce using rule 17 (expr -> NUMBER .)
    LT              reduce using rule 17 (expr -> NUMBER .)
    DIVIDE          reduce using rule 17 (expr -> NUMBER .)
    TIMES           reduce using rule 17 (expr -> NUMBER .)
    MINUS           reduce using rule 17 (expr -> NUMBER .)
    PLUS            reduce using rule 17 (expr -> NUMBER .)
    LBRACE          reduce using rule 17 (expr -> NUMBER .)
    FUNC            reduce using rule 17 (expr -> NUMBER .)
    ID              reduce using rule 17 (expr -> NUMBER .)
    IF              reduce using rule 17 (expr -> NUMBER .)
    RETURN          reduce using rule 17 (expr -> NUMBER .)
    LET             reduce using rule 17 (expr -> NUMBER .)
    SEMICOLON       reduce using rule 17 (expr -> NUMBER .)
    RPAREN          reduce using rule 17 (expr -> NUMBER .)
    COMMA           reduce using rule 17 (expr -> NUMBER .)


state 20

    (18) expr -> FALSE .
    NE              reduce using rule 18 (expr -> FALSE .)
    EQ              reduce using rule 18 (expr -> FALSE .)
    GT              reduce using rule 18 (expr -> FALSE .)
    LT              reduce using rule 18 (expr -> FALSE .)
    DIVIDE          reduce using rule 18 (expr -> FALSE .)
    TIMES           reduce using rule 18 (expr -> FALSE .)
    MINUS           reduce using rule 18 (expr -> FALSE .)
    PLUS            reduce using rule 18 (expr -> FALSE .)
    LBRACE          reduce using rule 18 (expr -> FALSE .)
    FUNC            reduce using rule 18 (expr -> FALSE .)
    ID              reduce using rule 18 (expr -> FALSE .)
    IF              reduce using rule 18 (expr -> FALSE .)
    RETURN          reduce using rule 18 (expr -> FALSE .)
    LET             reduce using rule 18 (expr -> FALSE .)
    SEMICOLON       reduce using rule 18 (expr -> FALSE .)
    RPAREN          reduce using rule 18 (expr -> FALSE .)
    COMMA           reduce using rule 18 (expr -> FALSE .)


state 21

    (19) expr -> TRUE .
    NE              reduce using rule 19 (expr -> TRUE .)
    EQ              reduce using rule 19 (expr -> TRUE .)
    GT              reduce using rule 19 (expr -> TRUE .)
    LT              reduce using rule 19 (expr -> TRUE .)
    DIVIDE          reduce using rule 19 (expr -> TRUE .)
    TIMES           reduce using rule 19 (expr -> TRUE .)
    MINUS           reduce using rule 19 (expr -> TRUE .)
    PLUS            reduce using rule 19 (expr -> TRUE .)
    LBRACE          reduce using rule 19 (expr -> TRUE .)
    FUNC            reduce using rule 19 (expr -> TRUE .)
    ID              reduce using rule 19 (expr -> TRUE .)
    IF              reduce using rule 19 (expr -> TRUE .)
    RETURN          reduce using rule 19 (expr -> TRUE .)
    LET             reduce using rule 19 (expr -> TRUE .)
    SEMICOLON       reduce using rule 19 (expr -> TRUE .)
    RPAREN          reduce using rule 19 (expr -> TRUE .)
    COMMA           reduce using rule 19 (expr -> TRUE .)


state 22

    (20) expr -> NOT . expr
    (16) expr -> . ID
    (17) expr -> . NUMBER
    (18) expr -> . FALSE
    (19) expr -> . TRUE
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr NE expr
    (24) expr -> . expr EQ expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr LT expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr TIMES expr
    (29) expr -> . expr MINUS expr
    (30) expr -> . expr PLUS expr
    (31) expr -> . ID LPAREN exprlist RPAREN
    ID              shift and go to state 18
    NUMBER          shift and go to state 19
    FALSE           shift and go to state 20
    TRUE            shift and go to state 21
    NOT             shift and go to state 22
    MINUS           shift and go to state 23
    LPAREN          shift and go to state 24

    expr                           shift and go to state 43

state 23

    (21) expr -> MINUS . expr
    (16) expr -> . ID
    (17) expr -> . NUMBER
    (18) expr -> . FALSE
    (19) expr -> . TRUE
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr NE expr
    (24) expr -> . expr EQ expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr LT expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr TIMES expr
    (29) expr -> . expr MINUS expr
    (30) expr -> . expr PLUS expr
    (31) expr -> . ID LPAREN exprlist RPAREN
    ID              shift and go to state 18
    NUMBER          shift and go to state 19
    FALSE           shift and go to state 20
    TRUE            shift and go to state 21
    NOT             shift and go to state 22
    MINUS           shift and go to state 23
    LPAREN          shift and go to state 24

    expr                           shift and go to state 44

state 24

    (22) expr -> LPAREN . expr RPAREN
    (16) expr -> . ID
    (17) expr -> . NUMBER
    (18) expr -> . FALSE
    (19) expr -> . TRUE
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr NE expr
    (24) expr -> . expr EQ expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr LT expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr TIMES expr
    (29) expr -> . expr MINUS expr
    (30) expr -> . expr PLUS expr
    (31) expr -> . ID LPAREN exprlist RPAREN
    ID              shift and go to state 18
    NUMBER          shift and go to state 19
    FALSE           shift and go to state 20
    TRUE            shift and go to state 21
    NOT             shift and go to state 22
    MINUS           shift and go to state 23
    LPAREN          shift and go to state 24

    expr                           shift and go to state 45

state 25

    (11) return_statement -> RETURN expr . SEMICOLON
    (23) expr -> expr . NE expr
    (24) expr -> expr . EQ expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . LT expr
    (27) expr -> expr . DIVIDE expr
    (28) expr -> expr . TIMES expr
    (29) expr -> expr . MINUS expr
    (30) expr -> expr . PLUS expr
    SEMICOLON       shift and go to state 46
    NE              shift and go to state 34
    EQ              shift and go to state 35
    GT              shift and go to state 36
    LT              shift and go to state 37
    DIVIDE          shift and go to state 38
    TIMES           shift and go to state 39
    MINUS           shift and go to state 40
    PLUS            shift and go to state 41


state 26

    (10) let_statement -> LET ID . ASSIGN expr SEMICOLON
    ASSIGN          shift and go to state 47


state 27

    (4) blk_statements -> LBRACE statements RBRACE .
    FUNC            reduce using rule 4 (blk_statements -> LBRACE statements RBRACE .)
    ID              reduce using rule 4 (blk_statements -> LBRACE statements RBRACE .)
    IF              reduce using rule 4 (blk_statements -> LBRACE statements RBRACE .)
    RETURN          reduce using rule 4 (blk_statements -> LBRACE statements RBRACE .)
    LET             reduce using rule 4 (blk_statements -> LBRACE statements RBRACE .)
    $end            reduce using rule 4 (blk_statements -> LBRACE statements RBRACE .)
    RBRACE          reduce using rule 4 (blk_statements -> LBRACE statements RBRACE .)
    ELSE            reduce using rule 4 (blk_statements -> LBRACE statements RBRACE .)


state 28

    (5) statement -> FUNC LPAREN params . RPAREN statements
    (14) params -> params . COMMA param
    RPAREN          shift and go to state 48
    COMMA           shift and go to state 49


state 29

    (13) params -> param .
    RPAREN          reduce using rule 13 (params -> param .)
    COMMA           reduce using rule 13 (params -> param .)


state 30

    (15) param -> ID .
    RPAREN          reduce using rule 15 (param -> ID .)
    COMMA           reduce using rule 15 (param -> ID .)


state 31

    (9) statement -> ID LPAREN exprlist . RPAREN
    (33) exprlist -> exprlist . COMMA expr
    RPAREN          shift and go to state 50
    COMMA           shift and go to state 51


state 32

    (32) exprlist -> expr .
    (23) expr -> expr . NE expr
    (24) expr -> expr . EQ expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . LT expr
    (27) expr -> expr . DIVIDE expr
    (28) expr -> expr . TIMES expr
    (29) expr -> expr . MINUS expr
    (30) expr -> expr . PLUS expr
    RPAREN          reduce using rule 32 (exprlist -> expr .)
    COMMA           reduce using rule 32 (exprlist -> expr .)
    NE              shift and go to state 34
    EQ              shift and go to state 35
    GT              shift and go to state 36
    LT              shift and go to state 37
    DIVIDE          shift and go to state 38
    TIMES           shift and go to state 39
    MINUS           shift and go to state 40
    PLUS            shift and go to state 41


state 33

    (12) if_statement -> IF expr statements . ELSE statements
    (3) statements -> statements . statement
    (5) statement -> . FUNC LPAREN params RPAREN statements
    (6) statement -> . if_statement
    (7) statement -> . return_statement
    (8) statement -> . let_statement
    (9) statement -> . ID LPAREN exprlist RPAREN
    (12) if_statement -> . IF expr statements ELSE statements
    (11) return_statement -> . RETURN expr SEMICOLON
    (10) let_statement -> . LET ID ASSIGN expr SEMICOLON
    ELSE            shift and go to state 52
    FUNC            shift and go to state 5
    ID              shift and go to state 9
    IF              shift and go to state 10
    RETURN          shift and go to state 11
    LET             shift and go to state 12

    statement                      shift and go to state 13
    if_statement                   shift and go to state 6
    return_statement               shift and go to state 7
    let_statement                  shift and go to state 8

state 34

    (23) expr -> expr NE . expr
    (16) expr -> . ID
    (17) expr -> . NUMBER
    (18) expr -> . FALSE
    (19) expr -> . TRUE
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr NE expr
    (24) expr -> . expr EQ expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr LT expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr TIMES expr
    (29) expr -> . expr MINUS expr
    (30) expr -> . expr PLUS expr
    (31) expr -> . ID LPAREN exprlist RPAREN
    ID              shift and go to state 18
    NUMBER          shift and go to state 19
    FALSE           shift and go to state 20
    TRUE            shift and go to state 21
    NOT             shift and go to state 22
    MINUS           shift and go to state 23
    LPAREN          shift and go to state 24

    expr                           shift and go to state 53

state 35

    (24) expr -> expr EQ . expr
    (16) expr -> . ID
    (17) expr -> . NUMBER
    (18) expr -> . FALSE
    (19) expr -> . TRUE
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr NE expr
    (24) expr -> . expr EQ expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr LT expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr TIMES expr
    (29) expr -> . expr MINUS expr
    (30) expr -> . expr PLUS expr
    (31) expr -> . ID LPAREN exprlist RPAREN
    ID              shift and go to state 18
    NUMBER          shift and go to state 19
    FALSE           shift and go to state 20
    TRUE            shift and go to state 21
    NOT             shift and go to state 22
    MINUS           shift and go to state 23
    LPAREN          shift and go to state 24

    expr                           shift and go to state 54

state 36

    (25) expr -> expr GT . expr
    (16) expr -> . ID
    (17) expr -> . NUMBER
    (18) expr -> . FALSE
    (19) expr -> . TRUE
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr NE expr
    (24) expr -> . expr EQ expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr LT expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr TIMES expr
    (29) expr -> . expr MINUS expr
    (30) expr -> . expr PLUS expr
    (31) expr -> . ID LPAREN exprlist RPAREN
    ID              shift and go to state 18
    NUMBER          shift and go to state 19
    FALSE           shift and go to state 20
    TRUE            shift and go to state 21
    NOT             shift and go to state 22
    MINUS           shift and go to state 23
    LPAREN          shift and go to state 24

    expr                           shift and go to state 55

state 37

    (26) expr -> expr LT . expr
    (16) expr -> . ID
    (17) expr -> . NUMBER
    (18) expr -> . FALSE
    (19) expr -> . TRUE
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr NE expr
    (24) expr -> . expr EQ expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr LT expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr TIMES expr
    (29) expr -> . expr MINUS expr
    (30) expr -> . expr PLUS expr
    (31) expr -> . ID LPAREN exprlist RPAREN
    ID              shift and go to state 18
    NUMBER          shift and go to state 19
    FALSE           shift and go to state 20
    TRUE            shift and go to state 21
    NOT             shift and go to state 22
    MINUS           shift and go to state 23
    LPAREN          shift and go to state 24

    expr                           shift and go to state 56

state 38

    (27) expr -> expr DIVIDE . expr
    (16) expr -> . ID
    (17) expr -> . NUMBER
    (18) expr -> . FALSE
    (19) expr -> . TRUE
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr NE expr
    (24) expr -> . expr EQ expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr LT expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr TIMES expr
    (29) expr -> . expr MINUS expr
    (30) expr -> . expr PLUS expr
    (31) expr -> . ID LPAREN exprlist RPAREN
    ID              shift and go to state 18
    NUMBER          shift and go to state 19
    FALSE           shift and go to state 20
    TRUE            shift and go to state 21
    NOT             shift and go to state 22
    MINUS           shift and go to state 23
    LPAREN          shift and go to state 24

    expr                           shift and go to state 57

state 39

    (28) expr -> expr TIMES . expr
    (16) expr -> . ID
    (17) expr -> . NUMBER
    (18) expr -> . FALSE
    (19) expr -> . TRUE
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr NE expr
    (24) expr -> . expr EQ expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr LT expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr TIMES expr
    (29) expr -> . expr MINUS expr
    (30) expr -> . expr PLUS expr
    (31) expr -> . ID LPAREN exprlist RPAREN
    ID              shift and go to state 18
    NUMBER          shift and go to state 19
    FALSE           shift and go to state 20
    TRUE            shift and go to state 21
    NOT             shift and go to state 22
    MINUS           shift and go to state 23
    LPAREN          shift and go to state 24

    expr                           shift and go to state 58

state 40

    (29) expr -> expr MINUS . expr
    (16) expr -> . ID
    (17) expr -> . NUMBER
    (18) expr -> . FALSE
    (19) expr -> . TRUE
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr NE expr
    (24) expr -> . expr EQ expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr LT expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr TIMES expr
    (29) expr -> . expr MINUS expr
    (30) expr -> . expr PLUS expr
    (31) expr -> . ID LPAREN exprlist RPAREN
    ID              shift and go to state 18
    NUMBER          shift and go to state 19
    FALSE           shift and go to state 20
    TRUE            shift and go to state 21
    NOT             shift and go to state 22
    MINUS           shift and go to state 23
    LPAREN          shift and go to state 24

    expr                           shift and go to state 59

state 41

    (30) expr -> expr PLUS . expr
    (16) expr -> . ID
    (17) expr -> . NUMBER
    (18) expr -> . FALSE
    (19) expr -> . TRUE
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr NE expr
    (24) expr -> . expr EQ expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr LT expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr TIMES expr
    (29) expr -> . expr MINUS expr
    (30) expr -> . expr PLUS expr
    (31) expr -> . ID LPAREN exprlist RPAREN
    ID              shift and go to state 18
    NUMBER          shift and go to state 19
    FALSE           shift and go to state 20
    TRUE            shift and go to state 21
    NOT             shift and go to state 22
    MINUS           shift and go to state 23
    LPAREN          shift and go to state 24

    expr                           shift and go to state 60

state 42

    (31) expr -> ID LPAREN . exprlist RPAREN
    (32) exprlist -> . expr
    (33) exprlist -> . exprlist COMMA expr
    (16) expr -> . ID
    (17) expr -> . NUMBER
    (18) expr -> . FALSE
    (19) expr -> . TRUE
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr NE expr
    (24) expr -> . expr EQ expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr LT expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr TIMES expr
    (29) expr -> . expr MINUS expr
    (30) expr -> . expr PLUS expr
    (31) expr -> . ID LPAREN exprlist RPAREN
    ID              shift and go to state 18
    NUMBER          shift and go to state 19
    FALSE           shift and go to state 20
    TRUE            shift and go to state 21
    NOT             shift and go to state 22
    MINUS           shift and go to state 23
    LPAREN          shift and go to state 24

    exprlist                       shift and go to state 61
    expr                           shift and go to state 32

state 43

    (20) expr -> NOT expr .
    (23) expr -> expr . NE expr
    (24) expr -> expr . EQ expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . LT expr
    (27) expr -> expr . DIVIDE expr
    (28) expr -> expr . TIMES expr
    (29) expr -> expr . MINUS expr
    (30) expr -> expr . PLUS expr
    NE              reduce using rule 20 (expr -> NOT expr .)
    EQ              reduce using rule 20 (expr -> NOT expr .)
    GT              reduce using rule 20 (expr -> NOT expr .)
    LT              reduce using rule 20 (expr -> NOT expr .)
    DIVIDE          reduce using rule 20 (expr -> NOT expr .)
    TIMES           reduce using rule 20 (expr -> NOT expr .)
    MINUS           reduce using rule 20 (expr -> NOT expr .)
    PLUS            reduce using rule 20 (expr -> NOT expr .)
    LBRACE          reduce using rule 20 (expr -> NOT expr .)
    FUNC            reduce using rule 20 (expr -> NOT expr .)
    ID              reduce using rule 20 (expr -> NOT expr .)
    IF              reduce using rule 20 (expr -> NOT expr .)
    RETURN          reduce using rule 20 (expr -> NOT expr .)
    LET             reduce using rule 20 (expr -> NOT expr .)
    SEMICOLON       reduce using rule 20 (expr -> NOT expr .)
    RPAREN          reduce using rule 20 (expr -> NOT expr .)
    COMMA           reduce using rule 20 (expr -> NOT expr .)


state 44

    (21) expr -> MINUS expr .
    (23) expr -> expr . NE expr
    (24) expr -> expr . EQ expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . LT expr
    (27) expr -> expr . DIVIDE expr
    (28) expr -> expr . TIMES expr
    (29) expr -> expr . MINUS expr
    (30) expr -> expr . PLUS expr
    NE              reduce using rule 21 (expr -> MINUS expr .)
    EQ              reduce using rule 21 (expr -> MINUS expr .)
    GT              reduce using rule 21 (expr -> MINUS expr .)
    LT              reduce using rule 21 (expr -> MINUS expr .)
    DIVIDE          reduce using rule 21 (expr -> MINUS expr .)
    TIMES           reduce using rule 21 (expr -> MINUS expr .)
    MINUS           reduce using rule 21 (expr -> MINUS expr .)
    PLUS            reduce using rule 21 (expr -> MINUS expr .)
    LBRACE          reduce using rule 21 (expr -> MINUS expr .)
    FUNC            reduce using rule 21 (expr -> MINUS expr .)
    ID              reduce using rule 21 (expr -> MINUS expr .)
    IF              reduce using rule 21 (expr -> MINUS expr .)
    RETURN          reduce using rule 21 (expr -> MINUS expr .)
    LET             reduce using rule 21 (expr -> MINUS expr .)
    SEMICOLON       reduce using rule 21 (expr -> MINUS expr .)
    RPAREN          reduce using rule 21 (expr -> MINUS expr .)
    COMMA           reduce using rule 21 (expr -> MINUS expr .)


state 45

    (22) expr -> LPAREN expr . RPAREN
    (23) expr -> expr . NE expr
    (24) expr -> expr . EQ expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . LT expr
    (27) expr -> expr . DIVIDE expr
    (28) expr -> expr . TIMES expr
    (29) expr -> expr . MINUS expr
    (30) expr -> expr . PLUS expr
    RPAREN          shift and go to state 62
    NE              shift and go to state 34
    EQ              shift and go to state 35
    GT              shift and go to state 36
    LT              shift and go to state 37
    DIVIDE          shift and go to state 38
    TIMES           shift and go to state 39
    MINUS           shift and go to state 40
    PLUS            shift and go to state 41


state 46

    (11) return_statement -> RETURN expr SEMICOLON .
    FUNC            reduce using rule 11 (return_statement -> RETURN expr SEMICOLON .)
    ID              reduce using rule 11 (return_statement -> RETURN expr SEMICOLON .)
    IF              reduce using rule 11 (return_statement -> RETURN expr SEMICOLON .)
    RETURN          reduce using rule 11 (return_statement -> RETURN expr SEMICOLON .)
    LET             reduce using rule 11 (return_statement -> RETURN expr SEMICOLON .)
    $end            reduce using rule 11 (return_statement -> RETURN expr SEMICOLON .)
    RBRACE          reduce using rule 11 (return_statement -> RETURN expr SEMICOLON .)
    ELSE            reduce using rule 11 (return_statement -> RETURN expr SEMICOLON .)


state 47

    (10) let_statement -> LET ID ASSIGN . expr SEMICOLON
    (16) expr -> . ID
    (17) expr -> . NUMBER
    (18) expr -> . FALSE
    (19) expr -> . TRUE
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr NE expr
    (24) expr -> . expr EQ expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr LT expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr TIMES expr
    (29) expr -> . expr MINUS expr
    (30) expr -> . expr PLUS expr
    (31) expr -> . ID LPAREN exprlist RPAREN
    ID              shift and go to state 18
    NUMBER          shift and go to state 19
    FALSE           shift and go to state 20
    TRUE            shift and go to state 21
    NOT             shift and go to state 22
    MINUS           shift and go to state 23
    LPAREN          shift and go to state 24

    expr                           shift and go to state 63

state 48

    (5) statement -> FUNC LPAREN params RPAREN . statements
    (1) statements -> . blk_statements
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) blk_statements -> . LBRACE statements RBRACE
    (5) statement -> . FUNC LPAREN params RPAREN statements
    (6) statement -> . if_statement
    (7) statement -> . return_statement
    (8) statement -> . let_statement
    (9) statement -> . ID LPAREN exprlist RPAREN
    (12) if_statement -> . IF expr statements ELSE statements
    (11) return_statement -> . RETURN expr SEMICOLON
    (10) let_statement -> . LET ID ASSIGN expr SEMICOLON
    LBRACE          shift and go to state 4
    FUNC            shift and go to state 5
    ID              shift and go to state 9
    IF              shift and go to state 10
    RETURN          shift and go to state 11
    LET             shift and go to state 12

    statements                     shift and go to state 64
    blk_statements                 shift and go to state 2
    statement                      shift and go to state 3
    if_statement                   shift and go to state 6
    return_statement               shift and go to state 7
    let_statement                  shift and go to state 8

state 49

    (14) params -> params COMMA . param
    (15) param -> . ID
    ID              shift and go to state 30

    param                          shift and go to state 65

state 50

    (9) statement -> ID LPAREN exprlist RPAREN .
    FUNC            reduce using rule 9 (statement -> ID LPAREN exprlist RPAREN .)
    ID              reduce using rule 9 (statement -> ID LPAREN exprlist RPAREN .)
    IF              reduce using rule 9 (statement -> ID LPAREN exprlist RPAREN .)
    RETURN          reduce using rule 9 (statement -> ID LPAREN exprlist RPAREN .)
    LET             reduce using rule 9 (statement -> ID LPAREN exprlist RPAREN .)
    $end            reduce using rule 9 (statement -> ID LPAREN exprlist RPAREN .)
    RBRACE          reduce using rule 9 (statement -> ID LPAREN exprlist RPAREN .)
    ELSE            reduce using rule 9 (statement -> ID LPAREN exprlist RPAREN .)


state 51

    (33) exprlist -> exprlist COMMA . expr
    (16) expr -> . ID
    (17) expr -> . NUMBER
    (18) expr -> . FALSE
    (19) expr -> . TRUE
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr NE expr
    (24) expr -> . expr EQ expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr LT expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr TIMES expr
    (29) expr -> . expr MINUS expr
    (30) expr -> . expr PLUS expr
    (31) expr -> . ID LPAREN exprlist RPAREN
    ID              shift and go to state 18
    NUMBER          shift and go to state 19
    FALSE           shift and go to state 20
    TRUE            shift and go to state 21
    NOT             shift and go to state 22
    MINUS           shift and go to state 23
    LPAREN          shift and go to state 24

    expr                           shift and go to state 66

state 52

    (12) if_statement -> IF expr statements ELSE . statements
    (1) statements -> . blk_statements
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) blk_statements -> . LBRACE statements RBRACE
    (5) statement -> . FUNC LPAREN params RPAREN statements
    (6) statement -> . if_statement
    (7) statement -> . return_statement
    (8) statement -> . let_statement
    (9) statement -> . ID LPAREN exprlist RPAREN
    (12) if_statement -> . IF expr statements ELSE statements
    (11) return_statement -> . RETURN expr SEMICOLON
    (10) let_statement -> . LET ID ASSIGN expr SEMICOLON
    LBRACE          shift and go to state 4
    FUNC            shift and go to state 5
    ID              shift and go to state 9
    IF              shift and go to state 10
    RETURN          shift and go to state 11
    LET             shift and go to state 12

    statements                     shift and go to state 67
    blk_statements                 shift and go to state 2
    statement                      shift and go to state 3
    if_statement                   shift and go to state 6
    return_statement               shift and go to state 7
    let_statement                  shift and go to state 8

state 53

    (23) expr -> expr NE expr .
    (23) expr -> expr . NE expr
    (24) expr -> expr . EQ expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . LT expr
    (27) expr -> expr . DIVIDE expr
    (28) expr -> expr . TIMES expr
    (29) expr -> expr . MINUS expr
    (30) expr -> expr . PLUS expr
    NE              reduce using rule 23 (expr -> expr NE expr .)
    EQ              reduce using rule 23 (expr -> expr NE expr .)
    LBRACE          reduce using rule 23 (expr -> expr NE expr .)
    FUNC            reduce using rule 23 (expr -> expr NE expr .)
    ID              reduce using rule 23 (expr -> expr NE expr .)
    IF              reduce using rule 23 (expr -> expr NE expr .)
    RETURN          reduce using rule 23 (expr -> expr NE expr .)
    LET             reduce using rule 23 (expr -> expr NE expr .)
    SEMICOLON       reduce using rule 23 (expr -> expr NE expr .)
    RPAREN          reduce using rule 23 (expr -> expr NE expr .)
    COMMA           reduce using rule 23 (expr -> expr NE expr .)
    GT              shift and go to state 36
    LT              shift and go to state 37
    DIVIDE          shift and go to state 38
    TIMES           shift and go to state 39
    MINUS           shift and go to state 40
    PLUS            shift and go to state 41


state 54

    (24) expr -> expr EQ expr .
    (23) expr -> expr . NE expr
    (24) expr -> expr . EQ expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . LT expr
    (27) expr -> expr . DIVIDE expr
    (28) expr -> expr . TIMES expr
    (29) expr -> expr . MINUS expr
    (30) expr -> expr . PLUS expr
    NE              reduce using rule 24 (expr -> expr EQ expr .)
    EQ              reduce using rule 24 (expr -> expr EQ expr .)
    LBRACE          reduce using rule 24 (expr -> expr EQ expr .)
    FUNC            reduce using rule 24 (expr -> expr EQ expr .)
    ID              reduce using rule 24 (expr -> expr EQ expr .)
    IF              reduce using rule 24 (expr -> expr EQ expr .)
    RETURN          reduce using rule 24 (expr -> expr EQ expr .)
    LET             reduce using rule 24 (expr -> expr EQ expr .)
    SEMICOLON       reduce using rule 24 (expr -> expr EQ expr .)
    RPAREN          reduce using rule 24 (expr -> expr EQ expr .)
    COMMA           reduce using rule 24 (expr -> expr EQ expr .)
    GT              shift and go to state 36
    LT              shift and go to state 37
    DIVIDE          shift and go to state 38
    TIMES           shift and go to state 39
    MINUS           shift and go to state 40
    PLUS            shift and go to state 41


state 55

    (25) expr -> expr GT expr .
    (23) expr -> expr . NE expr
    (24) expr -> expr . EQ expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . LT expr
    (27) expr -> expr . DIVIDE expr
    (28) expr -> expr . TIMES expr
    (29) expr -> expr . MINUS expr
    (30) expr -> expr . PLUS expr
    NE              reduce using rule 25 (expr -> expr GT expr .)
    EQ              reduce using rule 25 (expr -> expr GT expr .)
    GT              reduce using rule 25 (expr -> expr GT expr .)
    LT              reduce using rule 25 (expr -> expr GT expr .)
    LBRACE          reduce using rule 25 (expr -> expr GT expr .)
    FUNC            reduce using rule 25 (expr -> expr GT expr .)
    ID              reduce using rule 25 (expr -> expr GT expr .)
    IF              reduce using rule 25 (expr -> expr GT expr .)
    RETURN          reduce using rule 25 (expr -> expr GT expr .)
    LET             reduce using rule 25 (expr -> expr GT expr .)
    SEMICOLON       reduce using rule 25 (expr -> expr GT expr .)
    RPAREN          reduce using rule 25 (expr -> expr GT expr .)
    COMMA           reduce using rule 25 (expr -> expr GT expr .)
    DIVIDE          shift and go to state 38
    TIMES           shift and go to state 39
    MINUS           shift and go to state 40
    PLUS            shift and go to state 41


state 56

    (26) expr -> expr LT expr .
    (23) expr -> expr . NE expr
    (24) expr -> expr . EQ expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . LT expr
    (27) expr -> expr . DIVIDE expr
    (28) expr -> expr . TIMES expr
    (29) expr -> expr . MINUS expr
    (30) expr -> expr . PLUS expr
    NE              reduce using rule 26 (expr -> expr LT expr .)
    EQ              reduce using rule 26 (expr -> expr LT expr .)
    GT              reduce using rule 26 (expr -> expr LT expr .)
    LT              reduce using rule 26 (expr -> expr LT expr .)
    LBRACE          reduce using rule 26 (expr -> expr LT expr .)
    FUNC            reduce using rule 26 (expr -> expr LT expr .)
    ID              reduce using rule 26 (expr -> expr LT expr .)
    IF              reduce using rule 26 (expr -> expr LT expr .)
    RETURN          reduce using rule 26 (expr -> expr LT expr .)
    LET             reduce using rule 26 (expr -> expr LT expr .)
    SEMICOLON       reduce using rule 26 (expr -> expr LT expr .)
    RPAREN          reduce using rule 26 (expr -> expr LT expr .)
    COMMA           reduce using rule 26 (expr -> expr LT expr .)
    DIVIDE          shift and go to state 38
    TIMES           shift and go to state 39
    MINUS           shift and go to state 40
    PLUS            shift and go to state 41


state 57

    (27) expr -> expr DIVIDE expr .
    (23) expr -> expr . NE expr
    (24) expr -> expr . EQ expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . LT expr
    (27) expr -> expr . DIVIDE expr
    (28) expr -> expr . TIMES expr
    (29) expr -> expr . MINUS expr
    (30) expr -> expr . PLUS expr
    NE              reduce using rule 27 (expr -> expr DIVIDE expr .)
    EQ              reduce using rule 27 (expr -> expr DIVIDE expr .)
    GT              reduce using rule 27 (expr -> expr DIVIDE expr .)
    LT              reduce using rule 27 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 27 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 27 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 27 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 27 (expr -> expr DIVIDE expr .)
    LBRACE          reduce using rule 27 (expr -> expr DIVIDE expr .)
    FUNC            reduce using rule 27 (expr -> expr DIVIDE expr .)
    ID              reduce using rule 27 (expr -> expr DIVIDE expr .)
    IF              reduce using rule 27 (expr -> expr DIVIDE expr .)
    RETURN          reduce using rule 27 (expr -> expr DIVIDE expr .)
    LET             reduce using rule 27 (expr -> expr DIVIDE expr .)
    SEMICOLON       reduce using rule 27 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 27 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 27 (expr -> expr DIVIDE expr .)


state 58

    (28) expr -> expr TIMES expr .
    (23) expr -> expr . NE expr
    (24) expr -> expr . EQ expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . LT expr
    (27) expr -> expr . DIVIDE expr
    (28) expr -> expr . TIMES expr
    (29) expr -> expr . MINUS expr
    (30) expr -> expr . PLUS expr
    NE              reduce using rule 28 (expr -> expr TIMES expr .)
    EQ              reduce using rule 28 (expr -> expr TIMES expr .)
    GT              reduce using rule 28 (expr -> expr TIMES expr .)
    LT              reduce using rule 28 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 28 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 28 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 28 (expr -> expr TIMES expr .)
    PLUS            reduce using rule 28 (expr -> expr TIMES expr .)
    LBRACE          reduce using rule 28 (expr -> expr TIMES expr .)
    FUNC            reduce using rule 28 (expr -> expr TIMES expr .)
    ID              reduce using rule 28 (expr -> expr TIMES expr .)
    IF              reduce using rule 28 (expr -> expr TIMES expr .)
    RETURN          reduce using rule 28 (expr -> expr TIMES expr .)
    LET             reduce using rule 28 (expr -> expr TIMES expr .)
    SEMICOLON       reduce using rule 28 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 28 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 28 (expr -> expr TIMES expr .)


state 59

    (29) expr -> expr MINUS expr .
    (23) expr -> expr . NE expr
    (24) expr -> expr . EQ expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . LT expr
    (27) expr -> expr . DIVIDE expr
    (28) expr -> expr . TIMES expr
    (29) expr -> expr . MINUS expr
    (30) expr -> expr . PLUS expr
    NE              reduce using rule 29 (expr -> expr MINUS expr .)
    EQ              reduce using rule 29 (expr -> expr MINUS expr .)
    GT              reduce using rule 29 (expr -> expr MINUS expr .)
    LT              reduce using rule 29 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 29 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 29 (expr -> expr MINUS expr .)
    LBRACE          reduce using rule 29 (expr -> expr MINUS expr .)
    FUNC            reduce using rule 29 (expr -> expr MINUS expr .)
    ID              reduce using rule 29 (expr -> expr MINUS expr .)
    IF              reduce using rule 29 (expr -> expr MINUS expr .)
    RETURN          reduce using rule 29 (expr -> expr MINUS expr .)
    LET             reduce using rule 29 (expr -> expr MINUS expr .)
    SEMICOLON       reduce using rule 29 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 29 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 29 (expr -> expr MINUS expr .)
    DIVIDE          shift and go to state 38
    TIMES           shift and go to state 39


state 60

    (30) expr -> expr PLUS expr .
    (23) expr -> expr . NE expr
    (24) expr -> expr . EQ expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . LT expr
    (27) expr -> expr . DIVIDE expr
    (28) expr -> expr . TIMES expr
    (29) expr -> expr . MINUS expr
    (30) expr -> expr . PLUS expr
    NE              reduce using rule 30 (expr -> expr PLUS expr .)
    EQ              reduce using rule 30 (expr -> expr PLUS expr .)
    GT              reduce using rule 30 (expr -> expr PLUS expr .)
    LT              reduce using rule 30 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 30 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 30 (expr -> expr PLUS expr .)
    LBRACE          reduce using rule 30 (expr -> expr PLUS expr .)
    FUNC            reduce using rule 30 (expr -> expr PLUS expr .)
    ID              reduce using rule 30 (expr -> expr PLUS expr .)
    IF              reduce using rule 30 (expr -> expr PLUS expr .)
    RETURN          reduce using rule 30 (expr -> expr PLUS expr .)
    LET             reduce using rule 30 (expr -> expr PLUS expr .)
    SEMICOLON       reduce using rule 30 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 30 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 30 (expr -> expr PLUS expr .)
    DIVIDE          shift and go to state 38
    TIMES           shift and go to state 39


state 61

    (31) expr -> ID LPAREN exprlist . RPAREN
    (33) exprlist -> exprlist . COMMA expr
    RPAREN          shift and go to state 68
    COMMA           shift and go to state 51


state 62

    (22) expr -> LPAREN expr RPAREN .
    NE              reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    EQ              reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    LBRACE          reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    FUNC            reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    ID              reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    IF              reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    RETURN          reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    LET             reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 22 (expr -> LPAREN expr RPAREN .)


state 63

    (10) let_statement -> LET ID ASSIGN expr . SEMICOLON
    (23) expr -> expr . NE expr
    (24) expr -> expr . EQ expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . LT expr
    (27) expr -> expr . DIVIDE expr
    (28) expr -> expr . TIMES expr
    (29) expr -> expr . MINUS expr
    (30) expr -> expr . PLUS expr
    SEMICOLON       shift and go to state 69
    NE              shift and go to state 34
    EQ              shift and go to state 35
    GT              shift and go to state 36
    LT              shift and go to state 37
    DIVIDE          shift and go to state 38
    TIMES           shift and go to state 39
    MINUS           shift and go to state 40
    PLUS            shift and go to state 41


state 64

    (5) statement -> FUNC LPAREN params RPAREN statements .
    (3) statements -> statements . statement
    (5) statement -> . FUNC LPAREN params RPAREN statements
    (6) statement -> . if_statement
    (7) statement -> . return_statement
    (8) statement -> . let_statement
    (9) statement -> . ID LPAREN exprlist RPAREN
    (12) if_statement -> . IF expr statements ELSE statements
    (11) return_statement -> . RETURN expr SEMICOLON
    (10) let_statement -> . LET ID ASSIGN expr SEMICOLON
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LET resolved as shift
    $end            reduce using rule 5 (statement -> FUNC LPAREN params RPAREN statements .)
    RBRACE          reduce using rule 5 (statement -> FUNC LPAREN params RPAREN statements .)
    ELSE            reduce using rule 5 (statement -> FUNC LPAREN params RPAREN statements .)
    FUNC            shift and go to state 5
    ID              shift and go to state 9
    IF              shift and go to state 10
    RETURN          shift and go to state 11
    LET             shift and go to state 12

    statement                      shift and go to state 13
    if_statement                   shift and go to state 6
    return_statement               shift and go to state 7
    let_statement                  shift and go to state 8

state 65

    (14) params -> params COMMA param .
    RPAREN          reduce using rule 14 (params -> params COMMA param .)
    COMMA           reduce using rule 14 (params -> params COMMA param .)


state 66

    (33) exprlist -> exprlist COMMA expr .
    (23) expr -> expr . NE expr
    (24) expr -> expr . EQ expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . LT expr
    (27) expr -> expr . DIVIDE expr
    (28) expr -> expr . TIMES expr
    (29) expr -> expr . MINUS expr
    (30) expr -> expr . PLUS expr
    RPAREN          reduce using rule 33 (exprlist -> exprlist COMMA expr .)
    COMMA           reduce using rule 33 (exprlist -> exprlist COMMA expr .)
    NE              shift and go to state 34
    EQ              shift and go to state 35
    GT              shift and go to state 36
    LT              shift and go to state 37
    DIVIDE          shift and go to state 38
    TIMES           shift and go to state 39
    MINUS           shift and go to state 40
    PLUS            shift and go to state 41


state 67

    (12) if_statement -> IF expr statements ELSE statements .
    (3) statements -> statements . statement
    (5) statement -> . FUNC LPAREN params RPAREN statements
    (6) statement -> . if_statement
    (7) statement -> . return_statement
    (8) statement -> . let_statement
    (9) statement -> . ID LPAREN exprlist RPAREN
    (12) if_statement -> . IF expr statements ELSE statements
    (11) return_statement -> . RETURN expr SEMICOLON
    (10) let_statement -> . LET ID ASSIGN expr SEMICOLON
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LET resolved as shift
    $end            reduce using rule 12 (if_statement -> IF expr statements ELSE statements .)
    RBRACE          reduce using rule 12 (if_statement -> IF expr statements ELSE statements .)
    ELSE            reduce using rule 12 (if_statement -> IF expr statements ELSE statements .)
    FUNC            shift and go to state 5
    ID              shift and go to state 9
    IF              shift and go to state 10
    RETURN          shift and go to state 11
    LET             shift and go to state 12

    statement                      shift and go to state 13
    if_statement                   shift and go to state 6
    return_statement               shift and go to state 7
    let_statement                  shift and go to state 8

state 68

    (31) expr -> ID LPAREN exprlist RPAREN .
    NE              reduce using rule 31 (expr -> ID LPAREN exprlist RPAREN .)
    EQ              reduce using rule 31 (expr -> ID LPAREN exprlist RPAREN .)
    GT              reduce using rule 31 (expr -> ID LPAREN exprlist RPAREN .)
    LT              reduce using rule 31 (expr -> ID LPAREN exprlist RPAREN .)
    DIVIDE          reduce using rule 31 (expr -> ID LPAREN exprlist RPAREN .)
    TIMES           reduce using rule 31 (expr -> ID LPAREN exprlist RPAREN .)
    MINUS           reduce using rule 31 (expr -> ID LPAREN exprlist RPAREN .)
    PLUS            reduce using rule 31 (expr -> ID LPAREN exprlist RPAREN .)
    LBRACE          reduce using rule 31 (expr -> ID LPAREN exprlist RPAREN .)
    FUNC            reduce using rule 31 (expr -> ID LPAREN exprlist RPAREN .)
    ID              reduce using rule 31 (expr -> ID LPAREN exprlist RPAREN .)
    IF              reduce using rule 31 (expr -> ID LPAREN exprlist RPAREN .)
    RETURN          reduce using rule 31 (expr -> ID LPAREN exprlist RPAREN .)
    LET             reduce using rule 31 (expr -> ID LPAREN exprlist RPAREN .)
    SEMICOLON       reduce using rule 31 (expr -> ID LPAREN exprlist RPAREN .)
    RPAREN          reduce using rule 31 (expr -> ID LPAREN exprlist RPAREN .)
    COMMA           reduce using rule 31 (expr -> ID LPAREN exprlist RPAREN .)


state 69

    (10) let_statement -> LET ID ASSIGN expr SEMICOLON .
    FUNC            reduce using rule 10 (let_statement -> LET ID ASSIGN expr SEMICOLON .)
    ID              reduce using rule 10 (let_statement -> LET ID ASSIGN expr SEMICOLON .)
    IF              reduce using rule 10 (let_statement -> LET ID ASSIGN expr SEMICOLON .)
    RETURN          reduce using rule 10 (let_statement -> LET ID ASSIGN expr SEMICOLON .)
    LET             reduce using rule 10 (let_statement -> LET ID ASSIGN expr SEMICOLON .)
    $end            reduce using rule 10 (let_statement -> LET ID ASSIGN expr SEMICOLON .)
    RBRACE          reduce using rule 10 (let_statement -> LET ID ASSIGN expr SEMICOLON .)
    ELSE            reduce using rule 10 (let_statement -> LET ID ASSIGN expr SEMICOLON .)


Conflicts:

shift/reduce conflict for FUNC in state 64 resolved as shift
shift/reduce conflict for ID in state 64 resolved as shift
shift/reduce conflict for IF in state 64 resolved as shift
shift/reduce conflict for RETURN in state 64 resolved as shift
shift/reduce conflict for LET in state 64 resolved as shift
shift/reduce conflict for FUNC in state 67 resolved as shift
shift/reduce conflict for ID in state 67 resolved as shift
shift/reduce conflict for IF in state 67 resolved as shift
shift/reduce conflict for RETURN in state 67 resolved as shift
shift/reduce conflict for LET in state 67 resolved as shift