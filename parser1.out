Grammar:

Rule 0     S' -> statements
Rule 1     statements -> blk_statements
Rule 2     statements -> statement
Rule 3     statements -> statements statement
Rule 4     blk_statements -> LBRACE statements RBRACE
Rule 5     statement -> FUNC LPAREN params RPAREN statements
Rule 6     statement -> ID LPAREN exprlist RPAREN
Rule 7     statement -> if_statement
Rule 8     statement -> return_statement
Rule 9     statement -> let_statement
Rule 10    statement -> ID
Rule 11    let_statement -> LET ID ASSIGN expr SEMICOLON
Rule 12    return_statement -> RETURN expr SEMICOLON
Rule 13    if_statement -> IF expr statements ELSE statements
Rule 14    if_statement -> IF expr statements
Rule 15    expr -> ID
Rule 16    expr -> NUMBER
Rule 17    expr -> FALSE
Rule 18    expr -> TRUE
Rule 19    expr -> NOT expr  [precedence=right, level=5]
Rule 20    expr -> MINUS expr  [precedence=right, level=5]
Rule 21    expr -> LPAREN expr RPAREN
Rule 22    expr -> expr NE expr  [precedence=left, level=1]
Rule 23    expr -> expr EQ expr  [precedence=left, level=1]
Rule 24    expr -> expr GT expr  [precedence=left, level=2]
Rule 25    expr -> expr LT expr  [precedence=left, level=2]
Rule 26    expr -> expr DIVIDE expr  [precedence=left, level=4]
Rule 27    expr -> expr TIMES expr  [precedence=left, level=4]
Rule 28    expr -> expr MINUS expr  [precedence=left, level=3]
Rule 29    expr -> expr PLUS expr  [precedence=left, level=3]
Rule 30    expr -> ID LPAREN exprlist RPAREN
Rule 31    expr -> FUNC LPAREN params RPAREN statements
Rule 32    params -> param
Rule 33    params -> params COMMA param
Rule 34    param -> ID
Rule 35    exprlist -> expr
Rule 36    exprlist -> exprlist COMMA expr

Unused terminals:

    PRINT
    LE
    WHILE
    GE

Terminals, with rules where they appear:

ASSIGN               : 11
COMMA                : 33 36
DIVIDE               : 26
ELSE                 : 13
EQ                   : 23
FALSE                : 17
FUNC                 : 5 31
GE                   : 
GT                   : 24
ID                   : 6 10 11 15 30 34
IF                   : 13 14
LBRACE               : 4
LE                   : 
LET                  : 11
LPAREN               : 5 6 21 30 31
LT                   : 25
MINUS                : 20 28
NE                   : 22
NOT                  : 19
NUMBER               : 16
PLUS                 : 29
PRINT                : 
RBRACE               : 4
RETURN               : 12
RPAREN               : 5 6 21 30 31
SEMICOLON            : 11 12
TIMES                : 27
TRUE                 : 18
WHILE                : 
error                : 

Nonterminals, with rules where they appear:

blk_statements       : 1
expr                 : 11 12 13 14 19 20 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 35 36
exprlist             : 6 30 36
if_statement         : 7
let_statement        : 9
param                : 32 33
params               : 5 31 33
return_statement     : 8
statement            : 2 3
statements           : 3 4 5 13 13 14 31 0


state 0

    (0) S' -> . statements
    (1) statements -> . blk_statements
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) blk_statements -> . LBRACE statements RBRACE
    (5) statement -> . FUNC LPAREN params RPAREN statements
    (6) statement -> . ID LPAREN exprlist RPAREN
    (7) statement -> . if_statement
    (8) statement -> . return_statement
    (9) statement -> . let_statement
    (10) statement -> . ID
    (13) if_statement -> . IF expr statements ELSE statements
    (14) if_statement -> . IF expr statements
    (12) return_statement -> . RETURN expr SEMICOLON
    (11) let_statement -> . LET ID ASSIGN expr SEMICOLON
    LBRACE          shift and go to state 4
    FUNC            shift and go to state 5
    ID              shift and go to state 6
    IF              shift and go to state 10
    RETURN          shift and go to state 11
    LET             shift and go to state 12

    statements                     shift and go to state 1
    blk_statements                 shift and go to state 2
    statement                      shift and go to state 3
    if_statement                   shift and go to state 7
    return_statement               shift and go to state 8
    let_statement                  shift and go to state 9

state 1

    (0) S' -> statements .
    (3) statements -> statements . statement
    (5) statement -> . FUNC LPAREN params RPAREN statements
    (6) statement -> . ID LPAREN exprlist RPAREN
    (7) statement -> . if_statement
    (8) statement -> . return_statement
    (9) statement -> . let_statement
    (10) statement -> . ID
    (13) if_statement -> . IF expr statements ELSE statements
    (14) if_statement -> . IF expr statements
    (12) return_statement -> . RETURN expr SEMICOLON
    (11) let_statement -> . LET ID ASSIGN expr SEMICOLON
    FUNC            shift and go to state 5
    ID              shift and go to state 6
    IF              shift and go to state 10
    RETURN          shift and go to state 11
    LET             shift and go to state 12

    statement                      shift and go to state 13
    if_statement                   shift and go to state 7
    return_statement               shift and go to state 8
    let_statement                  shift and go to state 9

state 2

    (1) statements -> blk_statements .
    FUNC            reduce using rule 1 (statements -> blk_statements .)
    ID              reduce using rule 1 (statements -> blk_statements .)
    IF              reduce using rule 1 (statements -> blk_statements .)
    RETURN          reduce using rule 1 (statements -> blk_statements .)
    LET             reduce using rule 1 (statements -> blk_statements .)
    $end            reduce using rule 1 (statements -> blk_statements .)
    RBRACE          reduce using rule 1 (statements -> blk_statements .)
    ELSE            reduce using rule 1 (statements -> blk_statements .)
    NE              reduce using rule 1 (statements -> blk_statements .)
    EQ              reduce using rule 1 (statements -> blk_statements .)
    GT              reduce using rule 1 (statements -> blk_statements .)
    LT              reduce using rule 1 (statements -> blk_statements .)
    DIVIDE          reduce using rule 1 (statements -> blk_statements .)
    TIMES           reduce using rule 1 (statements -> blk_statements .)
    MINUS           reduce using rule 1 (statements -> blk_statements .)
    PLUS            reduce using rule 1 (statements -> blk_statements .)
    LBRACE          reduce using rule 1 (statements -> blk_statements .)
    SEMICOLON       reduce using rule 1 (statements -> blk_statements .)
    RPAREN          reduce using rule 1 (statements -> blk_statements .)
    COMMA           reduce using rule 1 (statements -> blk_statements .)


state 3

    (2) statements -> statement .
    FUNC            reduce using rule 2 (statements -> statement .)
    ID              reduce using rule 2 (statements -> statement .)
    IF              reduce using rule 2 (statements -> statement .)
    RETURN          reduce using rule 2 (statements -> statement .)
    LET             reduce using rule 2 (statements -> statement .)
    $end            reduce using rule 2 (statements -> statement .)
    RBRACE          reduce using rule 2 (statements -> statement .)
    ELSE            reduce using rule 2 (statements -> statement .)
    NE              reduce using rule 2 (statements -> statement .)
    EQ              reduce using rule 2 (statements -> statement .)
    GT              reduce using rule 2 (statements -> statement .)
    LT              reduce using rule 2 (statements -> statement .)
    DIVIDE          reduce using rule 2 (statements -> statement .)
    TIMES           reduce using rule 2 (statements -> statement .)
    MINUS           reduce using rule 2 (statements -> statement .)
    PLUS            reduce using rule 2 (statements -> statement .)
    LBRACE          reduce using rule 2 (statements -> statement .)
    SEMICOLON       reduce using rule 2 (statements -> statement .)
    RPAREN          reduce using rule 2 (statements -> statement .)
    COMMA           reduce using rule 2 (statements -> statement .)


state 4

    (4) blk_statements -> LBRACE . statements RBRACE
    (1) statements -> . blk_statements
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) blk_statements -> . LBRACE statements RBRACE
    (5) statement -> . FUNC LPAREN params RPAREN statements
    (6) statement -> . ID LPAREN exprlist RPAREN
    (7) statement -> . if_statement
    (8) statement -> . return_statement
    (9) statement -> . let_statement
    (10) statement -> . ID
    (13) if_statement -> . IF expr statements ELSE statements
    (14) if_statement -> . IF expr statements
    (12) return_statement -> . RETURN expr SEMICOLON
    (11) let_statement -> . LET ID ASSIGN expr SEMICOLON
    LBRACE          shift and go to state 4
    FUNC            shift and go to state 5
    ID              shift and go to state 6
    IF              shift and go to state 10
    RETURN          shift and go to state 11
    LET             shift and go to state 12

    statements                     shift and go to state 14
    blk_statements                 shift and go to state 2
    statement                      shift and go to state 3
    if_statement                   shift and go to state 7
    return_statement               shift and go to state 8
    let_statement                  shift and go to state 9

state 5

    (5) statement -> FUNC . LPAREN params RPAREN statements
    LPAREN          shift and go to state 15


state 6

    (6) statement -> ID . LPAREN exprlist RPAREN
    (10) statement -> ID .
    LPAREN          shift and go to state 16
    FUNC            reduce using rule 10 (statement -> ID .)
    ID              reduce using rule 10 (statement -> ID .)
    IF              reduce using rule 10 (statement -> ID .)
    RETURN          reduce using rule 10 (statement -> ID .)
    LET             reduce using rule 10 (statement -> ID .)
    $end            reduce using rule 10 (statement -> ID .)
    RBRACE          reduce using rule 10 (statement -> ID .)
    ELSE            reduce using rule 10 (statement -> ID .)
    NE              reduce using rule 10 (statement -> ID .)
    EQ              reduce using rule 10 (statement -> ID .)
    GT              reduce using rule 10 (statement -> ID .)
    LT              reduce using rule 10 (statement -> ID .)
    DIVIDE          reduce using rule 10 (statement -> ID .)
    TIMES           reduce using rule 10 (statement -> ID .)
    MINUS           reduce using rule 10 (statement -> ID .)
    PLUS            reduce using rule 10 (statement -> ID .)
    LBRACE          reduce using rule 10 (statement -> ID .)
    SEMICOLON       reduce using rule 10 (statement -> ID .)
    RPAREN          reduce using rule 10 (statement -> ID .)
    COMMA           reduce using rule 10 (statement -> ID .)


state 7

    (7) statement -> if_statement .
    FUNC            reduce using rule 7 (statement -> if_statement .)
    ID              reduce using rule 7 (statement -> if_statement .)
    IF              reduce using rule 7 (statement -> if_statement .)
    RETURN          reduce using rule 7 (statement -> if_statement .)
    LET             reduce using rule 7 (statement -> if_statement .)
    $end            reduce using rule 7 (statement -> if_statement .)
    RBRACE          reduce using rule 7 (statement -> if_statement .)
    ELSE            reduce using rule 7 (statement -> if_statement .)
    NE              reduce using rule 7 (statement -> if_statement .)
    EQ              reduce using rule 7 (statement -> if_statement .)
    GT              reduce using rule 7 (statement -> if_statement .)
    LT              reduce using rule 7 (statement -> if_statement .)
    DIVIDE          reduce using rule 7 (statement -> if_statement .)
    TIMES           reduce using rule 7 (statement -> if_statement .)
    MINUS           reduce using rule 7 (statement -> if_statement .)
    PLUS            reduce using rule 7 (statement -> if_statement .)
    LBRACE          reduce using rule 7 (statement -> if_statement .)
    SEMICOLON       reduce using rule 7 (statement -> if_statement .)
    RPAREN          reduce using rule 7 (statement -> if_statement .)
    COMMA           reduce using rule 7 (statement -> if_statement .)


state 8

    (8) statement -> return_statement .
    FUNC            reduce using rule 8 (statement -> return_statement .)
    ID              reduce using rule 8 (statement -> return_statement .)
    IF              reduce using rule 8 (statement -> return_statement .)
    RETURN          reduce using rule 8 (statement -> return_statement .)
    LET             reduce using rule 8 (statement -> return_statement .)
    $end            reduce using rule 8 (statement -> return_statement .)
    RBRACE          reduce using rule 8 (statement -> return_statement .)
    ELSE            reduce using rule 8 (statement -> return_statement .)
    NE              reduce using rule 8 (statement -> return_statement .)
    EQ              reduce using rule 8 (statement -> return_statement .)
    GT              reduce using rule 8 (statement -> return_statement .)
    LT              reduce using rule 8 (statement -> return_statement .)
    DIVIDE          reduce using rule 8 (statement -> return_statement .)
    TIMES           reduce using rule 8 (statement -> return_statement .)
    MINUS           reduce using rule 8 (statement -> return_statement .)
    PLUS            reduce using rule 8 (statement -> return_statement .)
    LBRACE          reduce using rule 8 (statement -> return_statement .)
    SEMICOLON       reduce using rule 8 (statement -> return_statement .)
    RPAREN          reduce using rule 8 (statement -> return_statement .)
    COMMA           reduce using rule 8 (statement -> return_statement .)


state 9

    (9) statement -> let_statement .
    FUNC            reduce using rule 9 (statement -> let_statement .)
    ID              reduce using rule 9 (statement -> let_statement .)
    IF              reduce using rule 9 (statement -> let_statement .)
    RETURN          reduce using rule 9 (statement -> let_statement .)
    LET             reduce using rule 9 (statement -> let_statement .)
    $end            reduce using rule 9 (statement -> let_statement .)
    RBRACE          reduce using rule 9 (statement -> let_statement .)
    ELSE            reduce using rule 9 (statement -> let_statement .)
    NE              reduce using rule 9 (statement -> let_statement .)
    EQ              reduce using rule 9 (statement -> let_statement .)
    GT              reduce using rule 9 (statement -> let_statement .)
    LT              reduce using rule 9 (statement -> let_statement .)
    DIVIDE          reduce using rule 9 (statement -> let_statement .)
    TIMES           reduce using rule 9 (statement -> let_statement .)
    MINUS           reduce using rule 9 (statement -> let_statement .)
    PLUS            reduce using rule 9 (statement -> let_statement .)
    LBRACE          reduce using rule 9 (statement -> let_statement .)
    SEMICOLON       reduce using rule 9 (statement -> let_statement .)
    RPAREN          reduce using rule 9 (statement -> let_statement .)
    COMMA           reduce using rule 9 (statement -> let_statement .)


state 10

    (13) if_statement -> IF . expr statements ELSE statements
    (14) if_statement -> IF . expr statements
    (15) expr -> . ID
    (16) expr -> . NUMBER
    (17) expr -> . FALSE
    (18) expr -> . TRUE
    (19) expr -> . NOT expr
    (20) expr -> . MINUS expr
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr NE expr
    (23) expr -> . expr EQ expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr DIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr PLUS expr
    (30) expr -> . ID LPAREN exprlist RPAREN
    (31) expr -> . FUNC LPAREN params RPAREN statements
    ID              shift and go to state 18
    NUMBER          shift and go to state 19
    FALSE           shift and go to state 20
    TRUE            shift and go to state 21
    NOT             shift and go to state 22
    MINUS           shift and go to state 23
    LPAREN          shift and go to state 24
    FUNC            shift and go to state 25

    expr                           shift and go to state 17

state 11

    (12) return_statement -> RETURN . expr SEMICOLON
    (15) expr -> . ID
    (16) expr -> . NUMBER
    (17) expr -> . FALSE
    (18) expr -> . TRUE
    (19) expr -> . NOT expr
    (20) expr -> . MINUS expr
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr NE expr
    (23) expr -> . expr EQ expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr DIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr PLUS expr
    (30) expr -> . ID LPAREN exprlist RPAREN
    (31) expr -> . FUNC LPAREN params RPAREN statements
    ID              shift and go to state 18
    NUMBER          shift and go to state 19
    FALSE           shift and go to state 20
    TRUE            shift and go to state 21
    NOT             shift and go to state 22
    MINUS           shift and go to state 23
    LPAREN          shift and go to state 24
    FUNC            shift and go to state 25

    expr                           shift and go to state 26

state 12

    (11) let_statement -> LET . ID ASSIGN expr SEMICOLON
    ID              shift and go to state 27


state 13

    (3) statements -> statements statement .
    FUNC            reduce using rule 3 (statements -> statements statement .)
    ID              reduce using rule 3 (statements -> statements statement .)
    IF              reduce using rule 3 (statements -> statements statement .)
    RETURN          reduce using rule 3 (statements -> statements statement .)
    LET             reduce using rule 3 (statements -> statements statement .)
    $end            reduce using rule 3 (statements -> statements statement .)
    RBRACE          reduce using rule 3 (statements -> statements statement .)
    ELSE            reduce using rule 3 (statements -> statements statement .)
    NE              reduce using rule 3 (statements -> statements statement .)
    EQ              reduce using rule 3 (statements -> statements statement .)
    GT              reduce using rule 3 (statements -> statements statement .)
    LT              reduce using rule 3 (statements -> statements statement .)
    DIVIDE          reduce using rule 3 (statements -> statements statement .)
    TIMES           reduce using rule 3 (statements -> statements statement .)
    MINUS           reduce using rule 3 (statements -> statements statement .)
    PLUS            reduce using rule 3 (statements -> statements statement .)
    LBRACE          reduce using rule 3 (statements -> statements statement .)
    SEMICOLON       reduce using rule 3 (statements -> statements statement .)
    RPAREN          reduce using rule 3 (statements -> statements statement .)
    COMMA           reduce using rule 3 (statements -> statements statement .)


state 14

    (4) blk_statements -> LBRACE statements . RBRACE
    (3) statements -> statements . statement
    (5) statement -> . FUNC LPAREN params RPAREN statements
    (6) statement -> . ID LPAREN exprlist RPAREN
    (7) statement -> . if_statement
    (8) statement -> . return_statement
    (9) statement -> . let_statement
    (10) statement -> . ID
    (13) if_statement -> . IF expr statements ELSE statements
    (14) if_statement -> . IF expr statements
    (12) return_statement -> . RETURN expr SEMICOLON
    (11) let_statement -> . LET ID ASSIGN expr SEMICOLON
    RBRACE          shift and go to state 28
    FUNC            shift and go to state 5
    ID              shift and go to state 6
    IF              shift and go to state 10
    RETURN          shift and go to state 11
    LET             shift and go to state 12

    statement                      shift and go to state 13
    if_statement                   shift and go to state 7
    return_statement               shift and go to state 8
    let_statement                  shift and go to state 9

state 15

    (5) statement -> FUNC LPAREN . params RPAREN statements
    (32) params -> . param
    (33) params -> . params COMMA param
    (34) param -> . ID
    ID              shift and go to state 31

    params                         shift and go to state 29
    param                          shift and go to state 30

state 16

    (6) statement -> ID LPAREN . exprlist RPAREN
    (35) exprlist -> . expr
    (36) exprlist -> . exprlist COMMA expr
    (15) expr -> . ID
    (16) expr -> . NUMBER
    (17) expr -> . FALSE
    (18) expr -> . TRUE
    (19) expr -> . NOT expr
    (20) expr -> . MINUS expr
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr NE expr
    (23) expr -> . expr EQ expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr DIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr PLUS expr
    (30) expr -> . ID LPAREN exprlist RPAREN
    (31) expr -> . FUNC LPAREN params RPAREN statements
    ID              shift and go to state 18
    NUMBER          shift and go to state 19
    FALSE           shift and go to state 20
    TRUE            shift and go to state 21
    NOT             shift and go to state 22
    MINUS           shift and go to state 23
    LPAREN          shift and go to state 24
    FUNC            shift and go to state 25

    exprlist                       shift and go to state 32
    expr                           shift and go to state 33

state 17

    (13) if_statement -> IF expr . statements ELSE statements
    (14) if_statement -> IF expr . statements
    (22) expr -> expr . NE expr
    (23) expr -> expr . EQ expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . DIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . PLUS expr
    (1) statements -> . blk_statements
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) blk_statements -> . LBRACE statements RBRACE
    (5) statement -> . FUNC LPAREN params RPAREN statements
    (6) statement -> . ID LPAREN exprlist RPAREN
    (7) statement -> . if_statement
    (8) statement -> . return_statement
    (9) statement -> . let_statement
    (10) statement -> . ID
    (13) if_statement -> . IF expr statements ELSE statements
    (14) if_statement -> . IF expr statements
    (12) return_statement -> . RETURN expr SEMICOLON
    (11) let_statement -> . LET ID ASSIGN expr SEMICOLON
    NE              shift and go to state 35
    EQ              shift and go to state 36
    GT              shift and go to state 37
    LT              shift and go to state 38
    DIVIDE          shift and go to state 39
    TIMES           shift and go to state 40
    MINUS           shift and go to state 41
    PLUS            shift and go to state 42
    LBRACE          shift and go to state 4
    FUNC            shift and go to state 5
    ID              shift and go to state 6
    IF              shift and go to state 10
    RETURN          shift and go to state 11
    LET             shift and go to state 12

    statements                     shift and go to state 34
    blk_statements                 shift and go to state 2
    statement                      shift and go to state 3
    if_statement                   shift and go to state 7
    return_statement               shift and go to state 8
    let_statement                  shift and go to state 9

state 18

    (15) expr -> ID .
    (30) expr -> ID . LPAREN exprlist RPAREN
    NE              reduce using rule 15 (expr -> ID .)
    EQ              reduce using rule 15 (expr -> ID .)
    GT              reduce using rule 15 (expr -> ID .)
    LT              reduce using rule 15 (expr -> ID .)
    DIVIDE          reduce using rule 15 (expr -> ID .)
    TIMES           reduce using rule 15 (expr -> ID .)
    MINUS           reduce using rule 15 (expr -> ID .)
    PLUS            reduce using rule 15 (expr -> ID .)
    LBRACE          reduce using rule 15 (expr -> ID .)
    FUNC            reduce using rule 15 (expr -> ID .)
    ID              reduce using rule 15 (expr -> ID .)
    IF              reduce using rule 15 (expr -> ID .)
    RETURN          reduce using rule 15 (expr -> ID .)
    LET             reduce using rule 15 (expr -> ID .)
    SEMICOLON       reduce using rule 15 (expr -> ID .)
    RPAREN          reduce using rule 15 (expr -> ID .)
    COMMA           reduce using rule 15 (expr -> ID .)
    LPAREN          shift and go to state 43


state 19

    (16) expr -> NUMBER .
    NE              reduce using rule 16 (expr -> NUMBER .)
    EQ              reduce using rule 16 (expr -> NUMBER .)
    GT              reduce using rule 16 (expr -> NUMBER .)
    LT              reduce using rule 16 (expr -> NUMBER .)
    DIVIDE          reduce using rule 16 (expr -> NUMBER .)
    TIMES           reduce using rule 16 (expr -> NUMBER .)
    MINUS           reduce using rule 16 (expr -> NUMBER .)
    PLUS            reduce using rule 16 (expr -> NUMBER .)
    LBRACE          reduce using rule 16 (expr -> NUMBER .)
    FUNC            reduce using rule 16 (expr -> NUMBER .)
    ID              reduce using rule 16 (expr -> NUMBER .)
    IF              reduce using rule 16 (expr -> NUMBER .)
    RETURN          reduce using rule 16 (expr -> NUMBER .)
    LET             reduce using rule 16 (expr -> NUMBER .)
    SEMICOLON       reduce using rule 16 (expr -> NUMBER .)
    RPAREN          reduce using rule 16 (expr -> NUMBER .)
    COMMA           reduce using rule 16 (expr -> NUMBER .)


state 20

    (17) expr -> FALSE .
    NE              reduce using rule 17 (expr -> FALSE .)
    EQ              reduce using rule 17 (expr -> FALSE .)
    GT              reduce using rule 17 (expr -> FALSE .)
    LT              reduce using rule 17 (expr -> FALSE .)
    DIVIDE          reduce using rule 17 (expr -> FALSE .)
    TIMES           reduce using rule 17 (expr -> FALSE .)
    MINUS           reduce using rule 17 (expr -> FALSE .)
    PLUS            reduce using rule 17 (expr -> FALSE .)
    LBRACE          reduce using rule 17 (expr -> FALSE .)
    FUNC            reduce using rule 17 (expr -> FALSE .)
    ID              reduce using rule 17 (expr -> FALSE .)
    IF              reduce using rule 17 (expr -> FALSE .)
    RETURN          reduce using rule 17 (expr -> FALSE .)
    LET             reduce using rule 17 (expr -> FALSE .)
    SEMICOLON       reduce using rule 17 (expr -> FALSE .)
    RPAREN          reduce using rule 17 (expr -> FALSE .)
    COMMA           reduce using rule 17 (expr -> FALSE .)


state 21

    (18) expr -> TRUE .
    NE              reduce using rule 18 (expr -> TRUE .)
    EQ              reduce using rule 18 (expr -> TRUE .)
    GT              reduce using rule 18 (expr -> TRUE .)
    LT              reduce using rule 18 (expr -> TRUE .)
    DIVIDE          reduce using rule 18 (expr -> TRUE .)
    TIMES           reduce using rule 18 (expr -> TRUE .)
    MINUS           reduce using rule 18 (expr -> TRUE .)
    PLUS            reduce using rule 18 (expr -> TRUE .)
    LBRACE          reduce using rule 18 (expr -> TRUE .)
    FUNC            reduce using rule 18 (expr -> TRUE .)
    ID              reduce using rule 18 (expr -> TRUE .)
    IF              reduce using rule 18 (expr -> TRUE .)
    RETURN          reduce using rule 18 (expr -> TRUE .)
    LET             reduce using rule 18 (expr -> TRUE .)
    SEMICOLON       reduce using rule 18 (expr -> TRUE .)
    RPAREN          reduce using rule 18 (expr -> TRUE .)
    COMMA           reduce using rule 18 (expr -> TRUE .)


state 22

    (19) expr -> NOT . expr
    (15) expr -> . ID
    (16) expr -> . NUMBER
    (17) expr -> . FALSE
    (18) expr -> . TRUE
    (19) expr -> . NOT expr
    (20) expr -> . MINUS expr
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr NE expr
    (23) expr -> . expr EQ expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr DIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr PLUS expr
    (30) expr -> . ID LPAREN exprlist RPAREN
    (31) expr -> . FUNC LPAREN params RPAREN statements
    ID              shift and go to state 18
    NUMBER          shift and go to state 19
    FALSE           shift and go to state 20
    TRUE            shift and go to state 21
    NOT             shift and go to state 22
    MINUS           shift and go to state 23
    LPAREN          shift and go to state 24
    FUNC            shift and go to state 25

    expr                           shift and go to state 44

state 23

    (20) expr -> MINUS . expr
    (15) expr -> . ID
    (16) expr -> . NUMBER
    (17) expr -> . FALSE
    (18) expr -> . TRUE
    (19) expr -> . NOT expr
    (20) expr -> . MINUS expr
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr NE expr
    (23) expr -> . expr EQ expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr DIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr PLUS expr
    (30) expr -> . ID LPAREN exprlist RPAREN
    (31) expr -> . FUNC LPAREN params RPAREN statements
    ID              shift and go to state 18
    NUMBER          shift and go to state 19
    FALSE           shift and go to state 20
    TRUE            shift and go to state 21
    NOT             shift and go to state 22
    MINUS           shift and go to state 23
    LPAREN          shift and go to state 24
    FUNC            shift and go to state 25

    expr                           shift and go to state 45

state 24

    (21) expr -> LPAREN . expr RPAREN
    (15) expr -> . ID
    (16) expr -> . NUMBER
    (17) expr -> . FALSE
    (18) expr -> . TRUE
    (19) expr -> . NOT expr
    (20) expr -> . MINUS expr
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr NE expr
    (23) expr -> . expr EQ expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr DIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr PLUS expr
    (30) expr -> . ID LPAREN exprlist RPAREN
    (31) expr -> . FUNC LPAREN params RPAREN statements
    ID              shift and go to state 18
    NUMBER          shift and go to state 19
    FALSE           shift and go to state 20
    TRUE            shift and go to state 21
    NOT             shift and go to state 22
    MINUS           shift and go to state 23
    LPAREN          shift and go to state 24
    FUNC            shift and go to state 25

    expr                           shift and go to state 46

state 25

    (31) expr -> FUNC . LPAREN params RPAREN statements
    LPAREN          shift and go to state 47


state 26

    (12) return_statement -> RETURN expr . SEMICOLON
    (22) expr -> expr . NE expr
    (23) expr -> expr . EQ expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . DIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . PLUS expr
    SEMICOLON       shift and go to state 48
    NE              shift and go to state 35
    EQ              shift and go to state 36
    GT              shift and go to state 37
    LT              shift and go to state 38
    DIVIDE          shift and go to state 39
    TIMES           shift and go to state 40
    MINUS           shift and go to state 41
    PLUS            shift and go to state 42


state 27

    (11) let_statement -> LET ID . ASSIGN expr SEMICOLON
    ASSIGN          shift and go to state 49


state 28

    (4) blk_statements -> LBRACE statements RBRACE .
    FUNC            reduce using rule 4 (blk_statements -> LBRACE statements RBRACE .)
    ID              reduce using rule 4 (blk_statements -> LBRACE statements RBRACE .)
    IF              reduce using rule 4 (blk_statements -> LBRACE statements RBRACE .)
    RETURN          reduce using rule 4 (blk_statements -> LBRACE statements RBRACE .)
    LET             reduce using rule 4 (blk_statements -> LBRACE statements RBRACE .)
    $end            reduce using rule 4 (blk_statements -> LBRACE statements RBRACE .)
    RBRACE          reduce using rule 4 (blk_statements -> LBRACE statements RBRACE .)
    ELSE            reduce using rule 4 (blk_statements -> LBRACE statements RBRACE .)
    NE              reduce using rule 4 (blk_statements -> LBRACE statements RBRACE .)
    EQ              reduce using rule 4 (blk_statements -> LBRACE statements RBRACE .)
    GT              reduce using rule 4 (blk_statements -> LBRACE statements RBRACE .)
    LT              reduce using rule 4 (blk_statements -> LBRACE statements RBRACE .)
    DIVIDE          reduce using rule 4 (blk_statements -> LBRACE statements RBRACE .)
    TIMES           reduce using rule 4 (blk_statements -> LBRACE statements RBRACE .)
    MINUS           reduce using rule 4 (blk_statements -> LBRACE statements RBRACE .)
    PLUS            reduce using rule 4 (blk_statements -> LBRACE statements RBRACE .)
    LBRACE          reduce using rule 4 (blk_statements -> LBRACE statements RBRACE .)
    SEMICOLON       reduce using rule 4 (blk_statements -> LBRACE statements RBRACE .)
    RPAREN          reduce using rule 4 (blk_statements -> LBRACE statements RBRACE .)
    COMMA           reduce using rule 4 (blk_statements -> LBRACE statements RBRACE .)


state 29

    (5) statement -> FUNC LPAREN params . RPAREN statements
    (33) params -> params . COMMA param
    RPAREN          shift and go to state 50
    COMMA           shift and go to state 51


state 30

    (32) params -> param .
    RPAREN          reduce using rule 32 (params -> param .)
    COMMA           reduce using rule 32 (params -> param .)


state 31

    (34) param -> ID .
    RPAREN          reduce using rule 34 (param -> ID .)
    COMMA           reduce using rule 34 (param -> ID .)


state 32

    (6) statement -> ID LPAREN exprlist . RPAREN
    (36) exprlist -> exprlist . COMMA expr
    RPAREN          shift and go to state 52
    COMMA           shift and go to state 53


state 33

    (35) exprlist -> expr .
    (22) expr -> expr . NE expr
    (23) expr -> expr . EQ expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . DIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . PLUS expr
    RPAREN          reduce using rule 35 (exprlist -> expr .)
    COMMA           reduce using rule 35 (exprlist -> expr .)
    NE              shift and go to state 35
    EQ              shift and go to state 36
    GT              shift and go to state 37
    LT              shift and go to state 38
    DIVIDE          shift and go to state 39
    TIMES           shift and go to state 40
    MINUS           shift and go to state 41
    PLUS            shift and go to state 42


state 34

    (13) if_statement -> IF expr statements . ELSE statements
    (14) if_statement -> IF expr statements .
    (3) statements -> statements . statement
    (5) statement -> . FUNC LPAREN params RPAREN statements
    (6) statement -> . ID LPAREN exprlist RPAREN
    (7) statement -> . if_statement
    (8) statement -> . return_statement
    (9) statement -> . let_statement
    (10) statement -> . ID
    (13) if_statement -> . IF expr statements ELSE statements
    (14) if_statement -> . IF expr statements
    (12) return_statement -> . RETURN expr SEMICOLON
    (11) let_statement -> . LET ID ASSIGN expr SEMICOLON
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LET resolved as shift
    ELSE            shift and go to state 54
    $end            reduce using rule 14 (if_statement -> IF expr statements .)
    RBRACE          reduce using rule 14 (if_statement -> IF expr statements .)
    NE              reduce using rule 14 (if_statement -> IF expr statements .)
    EQ              reduce using rule 14 (if_statement -> IF expr statements .)
    GT              reduce using rule 14 (if_statement -> IF expr statements .)
    LT              reduce using rule 14 (if_statement -> IF expr statements .)
    DIVIDE          reduce using rule 14 (if_statement -> IF expr statements .)
    TIMES           reduce using rule 14 (if_statement -> IF expr statements .)
    MINUS           reduce using rule 14 (if_statement -> IF expr statements .)
    PLUS            reduce using rule 14 (if_statement -> IF expr statements .)
    LBRACE          reduce using rule 14 (if_statement -> IF expr statements .)
    SEMICOLON       reduce using rule 14 (if_statement -> IF expr statements .)
    RPAREN          reduce using rule 14 (if_statement -> IF expr statements .)
    COMMA           reduce using rule 14 (if_statement -> IF expr statements .)
    FUNC            shift and go to state 5
    ID              shift and go to state 6
    IF              shift and go to state 10
    RETURN          shift and go to state 11
    LET             shift and go to state 12

    statement                      shift and go to state 13
    if_statement                   shift and go to state 7
    return_statement               shift and go to state 8
    let_statement                  shift and go to state 9

state 35

    (22) expr -> expr NE . expr
    (15) expr -> . ID
    (16) expr -> . NUMBER
    (17) expr -> . FALSE
    (18) expr -> . TRUE
    (19) expr -> . NOT expr
    (20) expr -> . MINUS expr
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr NE expr
    (23) expr -> . expr EQ expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr DIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr PLUS expr
    (30) expr -> . ID LPAREN exprlist RPAREN
    (31) expr -> . FUNC LPAREN params RPAREN statements
    ID              shift and go to state 18
    NUMBER          shift and go to state 19
    FALSE           shift and go to state 20
    TRUE            shift and go to state 21
    NOT             shift and go to state 22
    MINUS           shift and go to state 23
    LPAREN          shift and go to state 24
    FUNC            shift and go to state 25

    expr                           shift and go to state 55

state 36

    (23) expr -> expr EQ . expr
    (15) expr -> . ID
    (16) expr -> . NUMBER
    (17) expr -> . FALSE
    (18) expr -> . TRUE
    (19) expr -> . NOT expr
    (20) expr -> . MINUS expr
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr NE expr
    (23) expr -> . expr EQ expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr DIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr PLUS expr
    (30) expr -> . ID LPAREN exprlist RPAREN
    (31) expr -> . FUNC LPAREN params RPAREN statements
    ID              shift and go to state 18
    NUMBER          shift and go to state 19
    FALSE           shift and go to state 20
    TRUE            shift and go to state 21
    NOT             shift and go to state 22
    MINUS           shift and go to state 23
    LPAREN          shift and go to state 24
    FUNC            shift and go to state 25

    expr                           shift and go to state 56

state 37

    (24) expr -> expr GT . expr
    (15) expr -> . ID
    (16) expr -> . NUMBER
    (17) expr -> . FALSE
    (18) expr -> . TRUE
    (19) expr -> . NOT expr
    (20) expr -> . MINUS expr
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr NE expr
    (23) expr -> . expr EQ expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr DIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr PLUS expr
    (30) expr -> . ID LPAREN exprlist RPAREN
    (31) expr -> . FUNC LPAREN params RPAREN statements
    ID              shift and go to state 18
    NUMBER          shift and go to state 19
    FALSE           shift and go to state 20
    TRUE            shift and go to state 21
    NOT             shift and go to state 22
    MINUS           shift and go to state 23
    LPAREN          shift and go to state 24
    FUNC            shift and go to state 25

    expr                           shift and go to state 57

state 38

    (25) expr -> expr LT . expr
    (15) expr -> . ID
    (16) expr -> . NUMBER
    (17) expr -> . FALSE
    (18) expr -> . TRUE
    (19) expr -> . NOT expr
    (20) expr -> . MINUS expr
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr NE expr
    (23) expr -> . expr EQ expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr DIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr PLUS expr
    (30) expr -> . ID LPAREN exprlist RPAREN
    (31) expr -> . FUNC LPAREN params RPAREN statements
    ID              shift and go to state 18
    NUMBER          shift and go to state 19
    FALSE           shift and go to state 20
    TRUE            shift and go to state 21
    NOT             shift and go to state 22
    MINUS           shift and go to state 23
    LPAREN          shift and go to state 24
    FUNC            shift and go to state 25

    expr                           shift and go to state 58

state 39

    (26) expr -> expr DIVIDE . expr
    (15) expr -> . ID
    (16) expr -> . NUMBER
    (17) expr -> . FALSE
    (18) expr -> . TRUE
    (19) expr -> . NOT expr
    (20) expr -> . MINUS expr
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr NE expr
    (23) expr -> . expr EQ expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr DIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr PLUS expr
    (30) expr -> . ID LPAREN exprlist RPAREN
    (31) expr -> . FUNC LPAREN params RPAREN statements
    ID              shift and go to state 18
    NUMBER          shift and go to state 19
    FALSE           shift and go to state 20
    TRUE            shift and go to state 21
    NOT             shift and go to state 22
    MINUS           shift and go to state 23
    LPAREN          shift and go to state 24
    FUNC            shift and go to state 25

    expr                           shift and go to state 59

state 40

    (27) expr -> expr TIMES . expr
    (15) expr -> . ID
    (16) expr -> . NUMBER
    (17) expr -> . FALSE
    (18) expr -> . TRUE
    (19) expr -> . NOT expr
    (20) expr -> . MINUS expr
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr NE expr
    (23) expr -> . expr EQ expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr DIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr PLUS expr
    (30) expr -> . ID LPAREN exprlist RPAREN
    (31) expr -> . FUNC LPAREN params RPAREN statements
    ID              shift and go to state 18
    NUMBER          shift and go to state 19
    FALSE           shift and go to state 20
    TRUE            shift and go to state 21
    NOT             shift and go to state 22
    MINUS           shift and go to state 23
    LPAREN          shift and go to state 24
    FUNC            shift and go to state 25

    expr                           shift and go to state 60

state 41

    (28) expr -> expr MINUS . expr
    (15) expr -> . ID
    (16) expr -> . NUMBER
    (17) expr -> . FALSE
    (18) expr -> . TRUE
    (19) expr -> . NOT expr
    (20) expr -> . MINUS expr
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr NE expr
    (23) expr -> . expr EQ expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr DIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr PLUS expr
    (30) expr -> . ID LPAREN exprlist RPAREN
    (31) expr -> . FUNC LPAREN params RPAREN statements
    ID              shift and go to state 18
    NUMBER          shift and go to state 19
    FALSE           shift and go to state 20
    TRUE            shift and go to state 21
    NOT             shift and go to state 22
    MINUS           shift and go to state 23
    LPAREN          shift and go to state 24
    FUNC            shift and go to state 25

    expr                           shift and go to state 61

state 42

    (29) expr -> expr PLUS . expr
    (15) expr -> . ID
    (16) expr -> . NUMBER
    (17) expr -> . FALSE
    (18) expr -> . TRUE
    (19) expr -> . NOT expr
    (20) expr -> . MINUS expr
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr NE expr
    (23) expr -> . expr EQ expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr DIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr PLUS expr
    (30) expr -> . ID LPAREN exprlist RPAREN
    (31) expr -> . FUNC LPAREN params RPAREN statements
    ID              shift and go to state 18
    NUMBER          shift and go to state 19
    FALSE           shift and go to state 20
    TRUE            shift and go to state 21
    NOT             shift and go to state 22
    MINUS           shift and go to state 23
    LPAREN          shift and go to state 24
    FUNC            shift and go to state 25

    expr                           shift and go to state 62

state 43

    (30) expr -> ID LPAREN . exprlist RPAREN
    (35) exprlist -> . expr
    (36) exprlist -> . exprlist COMMA expr
    (15) expr -> . ID
    (16) expr -> . NUMBER
    (17) expr -> . FALSE
    (18) expr -> . TRUE
    (19) expr -> . NOT expr
    (20) expr -> . MINUS expr
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr NE expr
    (23) expr -> . expr EQ expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr DIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr PLUS expr
    (30) expr -> . ID LPAREN exprlist RPAREN
    (31) expr -> . FUNC LPAREN params RPAREN statements
    ID              shift and go to state 18
    NUMBER          shift and go to state 19
    FALSE           shift and go to state 20
    TRUE            shift and go to state 21
    NOT             shift and go to state 22
    MINUS           shift and go to state 23
    LPAREN          shift and go to state 24
    FUNC            shift and go to state 25

    exprlist                       shift and go to state 63
    expr                           shift and go to state 33

state 44

    (19) expr -> NOT expr .
    (22) expr -> expr . NE expr
    (23) expr -> expr . EQ expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . DIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . PLUS expr
    NE              reduce using rule 19 (expr -> NOT expr .)
    EQ              reduce using rule 19 (expr -> NOT expr .)
    GT              reduce using rule 19 (expr -> NOT expr .)
    LT              reduce using rule 19 (expr -> NOT expr .)
    DIVIDE          reduce using rule 19 (expr -> NOT expr .)
    TIMES           reduce using rule 19 (expr -> NOT expr .)
    MINUS           reduce using rule 19 (expr -> NOT expr .)
    PLUS            reduce using rule 19 (expr -> NOT expr .)
    LBRACE          reduce using rule 19 (expr -> NOT expr .)
    FUNC            reduce using rule 19 (expr -> NOT expr .)
    ID              reduce using rule 19 (expr -> NOT expr .)
    IF              reduce using rule 19 (expr -> NOT expr .)
    RETURN          reduce using rule 19 (expr -> NOT expr .)
    LET             reduce using rule 19 (expr -> NOT expr .)
    SEMICOLON       reduce using rule 19 (expr -> NOT expr .)
    RPAREN          reduce using rule 19 (expr -> NOT expr .)
    COMMA           reduce using rule 19 (expr -> NOT expr .)


state 45

    (20) expr -> MINUS expr .
    (22) expr -> expr . NE expr
    (23) expr -> expr . EQ expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . DIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . PLUS expr
    NE              reduce using rule 20 (expr -> MINUS expr .)
    EQ              reduce using rule 20 (expr -> MINUS expr .)
    GT              reduce using rule 20 (expr -> MINUS expr .)
    LT              reduce using rule 20 (expr -> MINUS expr .)
    DIVIDE          reduce using rule 20 (expr -> MINUS expr .)
    TIMES           reduce using rule 20 (expr -> MINUS expr .)
    MINUS           reduce using rule 20 (expr -> MINUS expr .)
    PLUS            reduce using rule 20 (expr -> MINUS expr .)
    LBRACE          reduce using rule 20 (expr -> MINUS expr .)
    FUNC            reduce using rule 20 (expr -> MINUS expr .)
    ID              reduce using rule 20 (expr -> MINUS expr .)
    IF              reduce using rule 20 (expr -> MINUS expr .)
    RETURN          reduce using rule 20 (expr -> MINUS expr .)
    LET             reduce using rule 20 (expr -> MINUS expr .)
    SEMICOLON       reduce using rule 20 (expr -> MINUS expr .)
    RPAREN          reduce using rule 20 (expr -> MINUS expr .)
    COMMA           reduce using rule 20 (expr -> MINUS expr .)


state 46

    (21) expr -> LPAREN expr . RPAREN
    (22) expr -> expr . NE expr
    (23) expr -> expr . EQ expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . DIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . PLUS expr
    RPAREN          shift and go to state 64
    NE              shift and go to state 35
    EQ              shift and go to state 36
    GT              shift and go to state 37
    LT              shift and go to state 38
    DIVIDE          shift and go to state 39
    TIMES           shift and go to state 40
    MINUS           shift and go to state 41
    PLUS            shift and go to state 42


state 47

    (31) expr -> FUNC LPAREN . params RPAREN statements
    (32) params -> . param
    (33) params -> . params COMMA param
    (34) param -> . ID
    ID              shift and go to state 31

    params                         shift and go to state 65
    param                          shift and go to state 30

state 48

    (12) return_statement -> RETURN expr SEMICOLON .
    FUNC            reduce using rule 12 (return_statement -> RETURN expr SEMICOLON .)
    ID              reduce using rule 12 (return_statement -> RETURN expr SEMICOLON .)
    IF              reduce using rule 12 (return_statement -> RETURN expr SEMICOLON .)
    RETURN          reduce using rule 12 (return_statement -> RETURN expr SEMICOLON .)
    LET             reduce using rule 12 (return_statement -> RETURN expr SEMICOLON .)
    $end            reduce using rule 12 (return_statement -> RETURN expr SEMICOLON .)
    RBRACE          reduce using rule 12 (return_statement -> RETURN expr SEMICOLON .)
    ELSE            reduce using rule 12 (return_statement -> RETURN expr SEMICOLON .)
    NE              reduce using rule 12 (return_statement -> RETURN expr SEMICOLON .)
    EQ              reduce using rule 12 (return_statement -> RETURN expr SEMICOLON .)
    GT              reduce using rule 12 (return_statement -> RETURN expr SEMICOLON .)
    LT              reduce using rule 12 (return_statement -> RETURN expr SEMICOLON .)
    DIVIDE          reduce using rule 12 (return_statement -> RETURN expr SEMICOLON .)
    TIMES           reduce using rule 12 (return_statement -> RETURN expr SEMICOLON .)
    MINUS           reduce using rule 12 (return_statement -> RETURN expr SEMICOLON .)
    PLUS            reduce using rule 12 (return_statement -> RETURN expr SEMICOLON .)
    LBRACE          reduce using rule 12 (return_statement -> RETURN expr SEMICOLON .)
    SEMICOLON       reduce using rule 12 (return_statement -> RETURN expr SEMICOLON .)
    RPAREN          reduce using rule 12 (return_statement -> RETURN expr SEMICOLON .)
    COMMA           reduce using rule 12 (return_statement -> RETURN expr SEMICOLON .)


state 49

    (11) let_statement -> LET ID ASSIGN . expr SEMICOLON
    (15) expr -> . ID
    (16) expr -> . NUMBER
    (17) expr -> . FALSE
    (18) expr -> . TRUE
    (19) expr -> . NOT expr
    (20) expr -> . MINUS expr
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr NE expr
    (23) expr -> . expr EQ expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr DIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr PLUS expr
    (30) expr -> . ID LPAREN exprlist RPAREN
    (31) expr -> . FUNC LPAREN params RPAREN statements
    ID              shift and go to state 18
    NUMBER          shift and go to state 19
    FALSE           shift and go to state 20
    TRUE            shift and go to state 21
    NOT             shift and go to state 22
    MINUS           shift and go to state 23
    LPAREN          shift and go to state 24
    FUNC            shift and go to state 25

    expr                           shift and go to state 66

state 50

    (5) statement -> FUNC LPAREN params RPAREN . statements
    (1) statements -> . blk_statements
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) blk_statements -> . LBRACE statements RBRACE
    (5) statement -> . FUNC LPAREN params RPAREN statements
    (6) statement -> . ID LPAREN exprlist RPAREN
    (7) statement -> . if_statement
    (8) statement -> . return_statement
    (9) statement -> . let_statement
    (10) statement -> . ID
    (13) if_statement -> . IF expr statements ELSE statements
    (14) if_statement -> . IF expr statements
    (12) return_statement -> . RETURN expr SEMICOLON
    (11) let_statement -> . LET ID ASSIGN expr SEMICOLON
    LBRACE          shift and go to state 4
    FUNC            shift and go to state 5
    ID              shift and go to state 6
    IF              shift and go to state 10
    RETURN          shift and go to state 11
    LET             shift and go to state 12

    statements                     shift and go to state 67
    blk_statements                 shift and go to state 2
    statement                      shift and go to state 3
    if_statement                   shift and go to state 7
    return_statement               shift and go to state 8
    let_statement                  shift and go to state 9

state 51

    (33) params -> params COMMA . param
    (34) param -> . ID
    ID              shift and go to state 31

    param                          shift and go to state 68

state 52

    (6) statement -> ID LPAREN exprlist RPAREN .
    FUNC            reduce using rule 6 (statement -> ID LPAREN exprlist RPAREN .)
    ID              reduce using rule 6 (statement -> ID LPAREN exprlist RPAREN .)
    IF              reduce using rule 6 (statement -> ID LPAREN exprlist RPAREN .)
    RETURN          reduce using rule 6 (statement -> ID LPAREN exprlist RPAREN .)
    LET             reduce using rule 6 (statement -> ID LPAREN exprlist RPAREN .)
    $end            reduce using rule 6 (statement -> ID LPAREN exprlist RPAREN .)
    RBRACE          reduce using rule 6 (statement -> ID LPAREN exprlist RPAREN .)
    ELSE            reduce using rule 6 (statement -> ID LPAREN exprlist RPAREN .)
    NE              reduce using rule 6 (statement -> ID LPAREN exprlist RPAREN .)
    EQ              reduce using rule 6 (statement -> ID LPAREN exprlist RPAREN .)
    GT              reduce using rule 6 (statement -> ID LPAREN exprlist RPAREN .)
    LT              reduce using rule 6 (statement -> ID LPAREN exprlist RPAREN .)
    DIVIDE          reduce using rule 6 (statement -> ID LPAREN exprlist RPAREN .)
    TIMES           reduce using rule 6 (statement -> ID LPAREN exprlist RPAREN .)
    MINUS           reduce using rule 6 (statement -> ID LPAREN exprlist RPAREN .)
    PLUS            reduce using rule 6 (statement -> ID LPAREN exprlist RPAREN .)
    LBRACE          reduce using rule 6 (statement -> ID LPAREN exprlist RPAREN .)
    SEMICOLON       reduce using rule 6 (statement -> ID LPAREN exprlist RPAREN .)
    RPAREN          reduce using rule 6 (statement -> ID LPAREN exprlist RPAREN .)
    COMMA           reduce using rule 6 (statement -> ID LPAREN exprlist RPAREN .)


state 53

    (36) exprlist -> exprlist COMMA . expr
    (15) expr -> . ID
    (16) expr -> . NUMBER
    (17) expr -> . FALSE
    (18) expr -> . TRUE
    (19) expr -> . NOT expr
    (20) expr -> . MINUS expr
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr NE expr
    (23) expr -> . expr EQ expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr DIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr PLUS expr
    (30) expr -> . ID LPAREN exprlist RPAREN
    (31) expr -> . FUNC LPAREN params RPAREN statements
    ID              shift and go to state 18
    NUMBER          shift and go to state 19
    FALSE           shift and go to state 20
    TRUE            shift and go to state 21
    NOT             shift and go to state 22
    MINUS           shift and go to state 23
    LPAREN          shift and go to state 24
    FUNC            shift and go to state 25

    expr                           shift and go to state 69

state 54

    (13) if_statement -> IF expr statements ELSE . statements
    (1) statements -> . blk_statements
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) blk_statements -> . LBRACE statements RBRACE
    (5) statement -> . FUNC LPAREN params RPAREN statements
    (6) statement -> . ID LPAREN exprlist RPAREN
    (7) statement -> . if_statement
    (8) statement -> . return_statement
    (9) statement -> . let_statement
    (10) statement -> . ID
    (13) if_statement -> . IF expr statements ELSE statements
    (14) if_statement -> . IF expr statements
    (12) return_statement -> . RETURN expr SEMICOLON
    (11) let_statement -> . LET ID ASSIGN expr SEMICOLON
    LBRACE          shift and go to state 4
    FUNC            shift and go to state 5
    ID              shift and go to state 6
    IF              shift and go to state 10
    RETURN          shift and go to state 11
    LET             shift and go to state 12

    statements                     shift and go to state 70
    blk_statements                 shift and go to state 2
    statement                      shift and go to state 3
    if_statement                   shift and go to state 7
    return_statement               shift and go to state 8
    let_statement                  shift and go to state 9

state 55

    (22) expr -> expr NE expr .
    (22) expr -> expr . NE expr
    (23) expr -> expr . EQ expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . DIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . PLUS expr
    NE              reduce using rule 22 (expr -> expr NE expr .)
    EQ              reduce using rule 22 (expr -> expr NE expr .)
    LBRACE          reduce using rule 22 (expr -> expr NE expr .)
    FUNC            reduce using rule 22 (expr -> expr NE expr .)
    ID              reduce using rule 22 (expr -> expr NE expr .)
    IF              reduce using rule 22 (expr -> expr NE expr .)
    RETURN          reduce using rule 22 (expr -> expr NE expr .)
    LET             reduce using rule 22 (expr -> expr NE expr .)
    SEMICOLON       reduce using rule 22 (expr -> expr NE expr .)
    RPAREN          reduce using rule 22 (expr -> expr NE expr .)
    COMMA           reduce using rule 22 (expr -> expr NE expr .)
    GT              shift and go to state 37
    LT              shift and go to state 38
    DIVIDE          shift and go to state 39
    TIMES           shift and go to state 40
    MINUS           shift and go to state 41
    PLUS            shift and go to state 42


state 56

    (23) expr -> expr EQ expr .
    (22) expr -> expr . NE expr
    (23) expr -> expr . EQ expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . DIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . PLUS expr
    NE              reduce using rule 23 (expr -> expr EQ expr .)
    EQ              reduce using rule 23 (expr -> expr EQ expr .)
    LBRACE          reduce using rule 23 (expr -> expr EQ expr .)
    FUNC            reduce using rule 23 (expr -> expr EQ expr .)
    ID              reduce using rule 23 (expr -> expr EQ expr .)
    IF              reduce using rule 23 (expr -> expr EQ expr .)
    RETURN          reduce using rule 23 (expr -> expr EQ expr .)
    LET             reduce using rule 23 (expr -> expr EQ expr .)
    SEMICOLON       reduce using rule 23 (expr -> expr EQ expr .)
    RPAREN          reduce using rule 23 (expr -> expr EQ expr .)
    COMMA           reduce using rule 23 (expr -> expr EQ expr .)
    GT              shift and go to state 37
    LT              shift and go to state 38
    DIVIDE          shift and go to state 39
    TIMES           shift and go to state 40
    MINUS           shift and go to state 41
    PLUS            shift and go to state 42


state 57

    (24) expr -> expr GT expr .
    (22) expr -> expr . NE expr
    (23) expr -> expr . EQ expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . DIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . PLUS expr
    NE              reduce using rule 24 (expr -> expr GT expr .)
    EQ              reduce using rule 24 (expr -> expr GT expr .)
    GT              reduce using rule 24 (expr -> expr GT expr .)
    LT              reduce using rule 24 (expr -> expr GT expr .)
    LBRACE          reduce using rule 24 (expr -> expr GT expr .)
    FUNC            reduce using rule 24 (expr -> expr GT expr .)
    ID              reduce using rule 24 (expr -> expr GT expr .)
    IF              reduce using rule 24 (expr -> expr GT expr .)
    RETURN          reduce using rule 24 (expr -> expr GT expr .)
    LET             reduce using rule 24 (expr -> expr GT expr .)
    SEMICOLON       reduce using rule 24 (expr -> expr GT expr .)
    RPAREN          reduce using rule 24 (expr -> expr GT expr .)
    COMMA           reduce using rule 24 (expr -> expr GT expr .)
    DIVIDE          shift and go to state 39
    TIMES           shift and go to state 40
    MINUS           shift and go to state 41
    PLUS            shift and go to state 42


state 58

    (25) expr -> expr LT expr .
    (22) expr -> expr . NE expr
    (23) expr -> expr . EQ expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . DIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . PLUS expr
    NE              reduce using rule 25 (expr -> expr LT expr .)
    EQ              reduce using rule 25 (expr -> expr LT expr .)
    GT              reduce using rule 25 (expr -> expr LT expr .)
    LT              reduce using rule 25 (expr -> expr LT expr .)
    LBRACE          reduce using rule 25 (expr -> expr LT expr .)
    FUNC            reduce using rule 25 (expr -> expr LT expr .)
    ID              reduce using rule 25 (expr -> expr LT expr .)
    IF              reduce using rule 25 (expr -> expr LT expr .)
    RETURN          reduce using rule 25 (expr -> expr LT expr .)
    LET             reduce using rule 25 (expr -> expr LT expr .)
    SEMICOLON       reduce using rule 25 (expr -> expr LT expr .)
    RPAREN          reduce using rule 25 (expr -> expr LT expr .)
    COMMA           reduce using rule 25 (expr -> expr LT expr .)
    DIVIDE          shift and go to state 39
    TIMES           shift and go to state 40
    MINUS           shift and go to state 41
    PLUS            shift and go to state 42


state 59

    (26) expr -> expr DIVIDE expr .
    (22) expr -> expr . NE expr
    (23) expr -> expr . EQ expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . DIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . PLUS expr
    NE              reduce using rule 26 (expr -> expr DIVIDE expr .)
    EQ              reduce using rule 26 (expr -> expr DIVIDE expr .)
    GT              reduce using rule 26 (expr -> expr DIVIDE expr .)
    LT              reduce using rule 26 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 26 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 26 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 26 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 26 (expr -> expr DIVIDE expr .)
    LBRACE          reduce using rule 26 (expr -> expr DIVIDE expr .)
    FUNC            reduce using rule 26 (expr -> expr DIVIDE expr .)
    ID              reduce using rule 26 (expr -> expr DIVIDE expr .)
    IF              reduce using rule 26 (expr -> expr DIVIDE expr .)
    RETURN          reduce using rule 26 (expr -> expr DIVIDE expr .)
    LET             reduce using rule 26 (expr -> expr DIVIDE expr .)
    SEMICOLON       reduce using rule 26 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 26 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 26 (expr -> expr DIVIDE expr .)


state 60

    (27) expr -> expr TIMES expr .
    (22) expr -> expr . NE expr
    (23) expr -> expr . EQ expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . DIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . PLUS expr
    NE              reduce using rule 27 (expr -> expr TIMES expr .)
    EQ              reduce using rule 27 (expr -> expr TIMES expr .)
    GT              reduce using rule 27 (expr -> expr TIMES expr .)
    LT              reduce using rule 27 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 27 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 27 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 27 (expr -> expr TIMES expr .)
    PLUS            reduce using rule 27 (expr -> expr TIMES expr .)
    LBRACE          reduce using rule 27 (expr -> expr TIMES expr .)
    FUNC            reduce using rule 27 (expr -> expr TIMES expr .)
    ID              reduce using rule 27 (expr -> expr TIMES expr .)
    IF              reduce using rule 27 (expr -> expr TIMES expr .)
    RETURN          reduce using rule 27 (expr -> expr TIMES expr .)
    LET             reduce using rule 27 (expr -> expr TIMES expr .)
    SEMICOLON       reduce using rule 27 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 27 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 27 (expr -> expr TIMES expr .)


state 61

    (28) expr -> expr MINUS expr .
    (22) expr -> expr . NE expr
    (23) expr -> expr . EQ expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . DIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . PLUS expr
    NE              reduce using rule 28 (expr -> expr MINUS expr .)
    EQ              reduce using rule 28 (expr -> expr MINUS expr .)
    GT              reduce using rule 28 (expr -> expr MINUS expr .)
    LT              reduce using rule 28 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 28 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 28 (expr -> expr MINUS expr .)
    LBRACE          reduce using rule 28 (expr -> expr MINUS expr .)
    FUNC            reduce using rule 28 (expr -> expr MINUS expr .)
    ID              reduce using rule 28 (expr -> expr MINUS expr .)
    IF              reduce using rule 28 (expr -> expr MINUS expr .)
    RETURN          reduce using rule 28 (expr -> expr MINUS expr .)
    LET             reduce using rule 28 (expr -> expr MINUS expr .)
    SEMICOLON       reduce using rule 28 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 28 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 28 (expr -> expr MINUS expr .)
    DIVIDE          shift and go to state 39
    TIMES           shift and go to state 40


state 62

    (29) expr -> expr PLUS expr .
    (22) expr -> expr . NE expr
    (23) expr -> expr . EQ expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . DIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . PLUS expr
    NE              reduce using rule 29 (expr -> expr PLUS expr .)
    EQ              reduce using rule 29 (expr -> expr PLUS expr .)
    GT              reduce using rule 29 (expr -> expr PLUS expr .)
    LT              reduce using rule 29 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 29 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 29 (expr -> expr PLUS expr .)
    LBRACE          reduce using rule 29 (expr -> expr PLUS expr .)
    FUNC            reduce using rule 29 (expr -> expr PLUS expr .)
    ID              reduce using rule 29 (expr -> expr PLUS expr .)
    IF              reduce using rule 29 (expr -> expr PLUS expr .)
    RETURN          reduce using rule 29 (expr -> expr PLUS expr .)
    LET             reduce using rule 29 (expr -> expr PLUS expr .)
    SEMICOLON       reduce using rule 29 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 29 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 29 (expr -> expr PLUS expr .)
    DIVIDE          shift and go to state 39
    TIMES           shift and go to state 40


state 63

    (30) expr -> ID LPAREN exprlist . RPAREN
    (36) exprlist -> exprlist . COMMA expr
    RPAREN          shift and go to state 71
    COMMA           shift and go to state 53


state 64

    (21) expr -> LPAREN expr RPAREN .
    NE              reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    EQ              reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    LBRACE          reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    FUNC            reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    ID              reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    IF              reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    RETURN          reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    LET             reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 21 (expr -> LPAREN expr RPAREN .)


state 65

    (31) expr -> FUNC LPAREN params . RPAREN statements
    (33) params -> params . COMMA param
    RPAREN          shift and go to state 72
    COMMA           shift and go to state 51


state 66

    (11) let_statement -> LET ID ASSIGN expr . SEMICOLON
    (22) expr -> expr . NE expr
    (23) expr -> expr . EQ expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . DIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . PLUS expr
    SEMICOLON       shift and go to state 73
    NE              shift and go to state 35
    EQ              shift and go to state 36
    GT              shift and go to state 37
    LT              shift and go to state 38
    DIVIDE          shift and go to state 39
    TIMES           shift and go to state 40
    MINUS           shift and go to state 41
    PLUS            shift and go to state 42


state 67

    (5) statement -> FUNC LPAREN params RPAREN statements .
    (3) statements -> statements . statement
    (5) statement -> . FUNC LPAREN params RPAREN statements
    (6) statement -> . ID LPAREN exprlist RPAREN
    (7) statement -> . if_statement
    (8) statement -> . return_statement
    (9) statement -> . let_statement
    (10) statement -> . ID
    (13) if_statement -> . IF expr statements ELSE statements
    (14) if_statement -> . IF expr statements
    (12) return_statement -> . RETURN expr SEMICOLON
    (11) let_statement -> . LET ID ASSIGN expr SEMICOLON
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LET resolved as shift
    $end            reduce using rule 5 (statement -> FUNC LPAREN params RPAREN statements .)
    RBRACE          reduce using rule 5 (statement -> FUNC LPAREN params RPAREN statements .)
    ELSE            reduce using rule 5 (statement -> FUNC LPAREN params RPAREN statements .)
    NE              reduce using rule 5 (statement -> FUNC LPAREN params RPAREN statements .)
    EQ              reduce using rule 5 (statement -> FUNC LPAREN params RPAREN statements .)
    GT              reduce using rule 5 (statement -> FUNC LPAREN params RPAREN statements .)
    LT              reduce using rule 5 (statement -> FUNC LPAREN params RPAREN statements .)
    DIVIDE          reduce using rule 5 (statement -> FUNC LPAREN params RPAREN statements .)
    TIMES           reduce using rule 5 (statement -> FUNC LPAREN params RPAREN statements .)
    MINUS           reduce using rule 5 (statement -> FUNC LPAREN params RPAREN statements .)
    PLUS            reduce using rule 5 (statement -> FUNC LPAREN params RPAREN statements .)
    LBRACE          reduce using rule 5 (statement -> FUNC LPAREN params RPAREN statements .)
    SEMICOLON       reduce using rule 5 (statement -> FUNC LPAREN params RPAREN statements .)
    RPAREN          reduce using rule 5 (statement -> FUNC LPAREN params RPAREN statements .)
    COMMA           reduce using rule 5 (statement -> FUNC LPAREN params RPAREN statements .)
    FUNC            shift and go to state 5
    ID              shift and go to state 6
    IF              shift and go to state 10
    RETURN          shift and go to state 11
    LET             shift and go to state 12

    statement                      shift and go to state 13
    if_statement                   shift and go to state 7
    return_statement               shift and go to state 8
    let_statement                  shift and go to state 9

state 68

    (33) params -> params COMMA param .
    RPAREN          reduce using rule 33 (params -> params COMMA param .)
    COMMA           reduce using rule 33 (params -> params COMMA param .)


state 69

    (36) exprlist -> exprlist COMMA expr .
    (22) expr -> expr . NE expr
    (23) expr -> expr . EQ expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . DIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . PLUS expr
    RPAREN          reduce using rule 36 (exprlist -> exprlist COMMA expr .)
    COMMA           reduce using rule 36 (exprlist -> exprlist COMMA expr .)
    NE              shift and go to state 35
    EQ              shift and go to state 36
    GT              shift and go to state 37
    LT              shift and go to state 38
    DIVIDE          shift and go to state 39
    TIMES           shift and go to state 40
    MINUS           shift and go to state 41
    PLUS            shift and go to state 42


state 70

    (13) if_statement -> IF expr statements ELSE statements .
    (3) statements -> statements . statement
    (5) statement -> . FUNC LPAREN params RPAREN statements
    (6) statement -> . ID LPAREN exprlist RPAREN
    (7) statement -> . if_statement
    (8) statement -> . return_statement
    (9) statement -> . let_statement
    (10) statement -> . ID
    (13) if_statement -> . IF expr statements ELSE statements
    (14) if_statement -> . IF expr statements
    (12) return_statement -> . RETURN expr SEMICOLON
    (11) let_statement -> . LET ID ASSIGN expr SEMICOLON
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LET resolved as shift
    $end            reduce using rule 13 (if_statement -> IF expr statements ELSE statements .)
    RBRACE          reduce using rule 13 (if_statement -> IF expr statements ELSE statements .)
    ELSE            reduce using rule 13 (if_statement -> IF expr statements ELSE statements .)
    NE              reduce using rule 13 (if_statement -> IF expr statements ELSE statements .)
    EQ              reduce using rule 13 (if_statement -> IF expr statements ELSE statements .)
    GT              reduce using rule 13 (if_statement -> IF expr statements ELSE statements .)
    LT              reduce using rule 13 (if_statement -> IF expr statements ELSE statements .)
    DIVIDE          reduce using rule 13 (if_statement -> IF expr statements ELSE statements .)
    TIMES           reduce using rule 13 (if_statement -> IF expr statements ELSE statements .)
    MINUS           reduce using rule 13 (if_statement -> IF expr statements ELSE statements .)
    PLUS            reduce using rule 13 (if_statement -> IF expr statements ELSE statements .)
    LBRACE          reduce using rule 13 (if_statement -> IF expr statements ELSE statements .)
    SEMICOLON       reduce using rule 13 (if_statement -> IF expr statements ELSE statements .)
    RPAREN          reduce using rule 13 (if_statement -> IF expr statements ELSE statements .)
    COMMA           reduce using rule 13 (if_statement -> IF expr statements ELSE statements .)
    FUNC            shift and go to state 5
    ID              shift and go to state 6
    IF              shift and go to state 10
    RETURN          shift and go to state 11
    LET             shift and go to state 12

    statement                      shift and go to state 13
    if_statement                   shift and go to state 7
    return_statement               shift and go to state 8
    let_statement                  shift and go to state 9

state 71

    (30) expr -> ID LPAREN exprlist RPAREN .
    NE              reduce using rule 30 (expr -> ID LPAREN exprlist RPAREN .)
    EQ              reduce using rule 30 (expr -> ID LPAREN exprlist RPAREN .)
    GT              reduce using rule 30 (expr -> ID LPAREN exprlist RPAREN .)
    LT              reduce using rule 30 (expr -> ID LPAREN exprlist RPAREN .)
    DIVIDE          reduce using rule 30 (expr -> ID LPAREN exprlist RPAREN .)
    TIMES           reduce using rule 30 (expr -> ID LPAREN exprlist RPAREN .)
    MINUS           reduce using rule 30 (expr -> ID LPAREN exprlist RPAREN .)
    PLUS            reduce using rule 30 (expr -> ID LPAREN exprlist RPAREN .)
    LBRACE          reduce using rule 30 (expr -> ID LPAREN exprlist RPAREN .)
    FUNC            reduce using rule 30 (expr -> ID LPAREN exprlist RPAREN .)
    ID              reduce using rule 30 (expr -> ID LPAREN exprlist RPAREN .)
    IF              reduce using rule 30 (expr -> ID LPAREN exprlist RPAREN .)
    RETURN          reduce using rule 30 (expr -> ID LPAREN exprlist RPAREN .)
    LET             reduce using rule 30 (expr -> ID LPAREN exprlist RPAREN .)
    SEMICOLON       reduce using rule 30 (expr -> ID LPAREN exprlist RPAREN .)
    RPAREN          reduce using rule 30 (expr -> ID LPAREN exprlist RPAREN .)
    COMMA           reduce using rule 30 (expr -> ID LPAREN exprlist RPAREN .)


state 72

    (31) expr -> FUNC LPAREN params RPAREN . statements
    (1) statements -> . blk_statements
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) blk_statements -> . LBRACE statements RBRACE
    (5) statement -> . FUNC LPAREN params RPAREN statements
    (6) statement -> . ID LPAREN exprlist RPAREN
    (7) statement -> . if_statement
    (8) statement -> . return_statement
    (9) statement -> . let_statement
    (10) statement -> . ID
    (13) if_statement -> . IF expr statements ELSE statements
    (14) if_statement -> . IF expr statements
    (12) return_statement -> . RETURN expr SEMICOLON
    (11) let_statement -> . LET ID ASSIGN expr SEMICOLON
    LBRACE          shift and go to state 4
    FUNC            shift and go to state 5
    ID              shift and go to state 6
    IF              shift and go to state 10
    RETURN          shift and go to state 11
    LET             shift and go to state 12

    statements                     shift and go to state 74
    blk_statements                 shift and go to state 2
    statement                      shift and go to state 3
    if_statement                   shift and go to state 7
    return_statement               shift and go to state 8
    let_statement                  shift and go to state 9

state 73

    (11) let_statement -> LET ID ASSIGN expr SEMICOLON .
    FUNC            reduce using rule 11 (let_statement -> LET ID ASSIGN expr SEMICOLON .)
    ID              reduce using rule 11 (let_statement -> LET ID ASSIGN expr SEMICOLON .)
    IF              reduce using rule 11 (let_statement -> LET ID ASSIGN expr SEMICOLON .)
    RETURN          reduce using rule 11 (let_statement -> LET ID ASSIGN expr SEMICOLON .)
    LET             reduce using rule 11 (let_statement -> LET ID ASSIGN expr SEMICOLON .)
    $end            reduce using rule 11 (let_statement -> LET ID ASSIGN expr SEMICOLON .)
    RBRACE          reduce using rule 11 (let_statement -> LET ID ASSIGN expr SEMICOLON .)
    ELSE            reduce using rule 11 (let_statement -> LET ID ASSIGN expr SEMICOLON .)
    NE              reduce using rule 11 (let_statement -> LET ID ASSIGN expr SEMICOLON .)
    EQ              reduce using rule 11 (let_statement -> LET ID ASSIGN expr SEMICOLON .)
    GT              reduce using rule 11 (let_statement -> LET ID ASSIGN expr SEMICOLON .)
    LT              reduce using rule 11 (let_statement -> LET ID ASSIGN expr SEMICOLON .)
    DIVIDE          reduce using rule 11 (let_statement -> LET ID ASSIGN expr SEMICOLON .)
    TIMES           reduce using rule 11 (let_statement -> LET ID ASSIGN expr SEMICOLON .)
    MINUS           reduce using rule 11 (let_statement -> LET ID ASSIGN expr SEMICOLON .)
    PLUS            reduce using rule 11 (let_statement -> LET ID ASSIGN expr SEMICOLON .)
    LBRACE          reduce using rule 11 (let_statement -> LET ID ASSIGN expr SEMICOLON .)
    SEMICOLON       reduce using rule 11 (let_statement -> LET ID ASSIGN expr SEMICOLON .)
    RPAREN          reduce using rule 11 (let_statement -> LET ID ASSIGN expr SEMICOLON .)
    COMMA           reduce using rule 11 (let_statement -> LET ID ASSIGN expr SEMICOLON .)


state 74

    (31) expr -> FUNC LPAREN params RPAREN statements .
    (3) statements -> statements . statement
    (5) statement -> . FUNC LPAREN params RPAREN statements
    (6) statement -> . ID LPAREN exprlist RPAREN
    (7) statement -> . if_statement
    (8) statement -> . return_statement
    (9) statement -> . let_statement
    (10) statement -> . ID
    (13) if_statement -> . IF expr statements ELSE statements
    (14) if_statement -> . IF expr statements
    (12) return_statement -> . RETURN expr SEMICOLON
    (11) let_statement -> . LET ID ASSIGN expr SEMICOLON
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LET resolved as shift
    NE              reduce using rule 31 (expr -> FUNC LPAREN params RPAREN statements .)
    EQ              reduce using rule 31 (expr -> FUNC LPAREN params RPAREN statements .)
    GT              reduce using rule 31 (expr -> FUNC LPAREN params RPAREN statements .)
    LT              reduce using rule 31 (expr -> FUNC LPAREN params RPAREN statements .)
    DIVIDE          reduce using rule 31 (expr -> FUNC LPAREN params RPAREN statements .)
    TIMES           reduce using rule 31 (expr -> FUNC LPAREN params RPAREN statements .)
    MINUS           reduce using rule 31 (expr -> FUNC LPAREN params RPAREN statements .)
    PLUS            reduce using rule 31 (expr -> FUNC LPAREN params RPAREN statements .)
    LBRACE          reduce using rule 31 (expr -> FUNC LPAREN params RPAREN statements .)
    SEMICOLON       reduce using rule 31 (expr -> FUNC LPAREN params RPAREN statements .)
    RPAREN          reduce using rule 31 (expr -> FUNC LPAREN params RPAREN statements .)
    COMMA           reduce using rule 31 (expr -> FUNC LPAREN params RPAREN statements .)
    FUNC            shift and go to state 5
    ID              shift and go to state 6
    IF              shift and go to state 10
    RETURN          shift and go to state 11
    LET             shift and go to state 12

    statement                      shift and go to state 13
    if_statement                   shift and go to state 7
    return_statement               shift and go to state 8
    let_statement                  shift and go to state 9

Conflicts:

shift/reduce conflict for ELSE in state 34 resolved as shift
shift/reduce conflict for FUNC in state 34 resolved as shift
shift/reduce conflict for ID in state 34 resolved as shift
shift/reduce conflict for IF in state 34 resolved as shift
shift/reduce conflict for RETURN in state 34 resolved as shift
shift/reduce conflict for LET in state 34 resolved as shift
shift/reduce conflict for FUNC in state 67 resolved as shift
shift/reduce conflict for ID in state 67 resolved as shift
shift/reduce conflict for IF in state 67 resolved as shift
shift/reduce conflict for RETURN in state 67 resolved as shift
shift/reduce conflict for LET in state 67 resolved as shift
shift/reduce conflict for FUNC in state 70 resolved as shift
shift/reduce conflict for ID in state 70 resolved as shift
shift/reduce conflict for IF in state 70 resolved as shift
shift/reduce conflict for RETURN in state 70 resolved as shift
shift/reduce conflict for LET in state 70 resolved as shift
shift/reduce conflict for FUNC in state 74 resolved as shift
shift/reduce conflict for ID in state 74 resolved as shift
shift/reduce conflict for IF in state 74 resolved as shift
shift/reduce conflict for RETURN in state 74 resolved as shift
shift/reduce conflict for LET in state 74 resolved as shift